<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1,791 samples, 0.89%)</title><rect x="463.3" y="165" width="10.5" height="15.0" fill="rgb(251,165,5)" rx="2" ry="2" />
<text  x="466.30" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (555 samples, 0.27%)</title><rect x="1030.3" y="149" width="3.2" height="15.0" fill="rgb(205,174,25)" rx="2" ry="2" />
<text  x="1033.29" y="159.5" ></text>
</g>
<g >
<title>malloc@plt (33 samples, 0.02%)</title><rect x="1091.2" y="197" width="0.2" height="15.0" fill="rgb(247,174,34)" rx="2" ry="2" />
<text  x="1094.23" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (56 samples, 0.03%)</title><rect x="1079.2" y="197" width="0.3" height="15.0" fill="rgb(241,86,46)" rx="2" ry="2" />
<text  x="1082.22" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (99 samples, 0.05%)</title><rect x="1062.5" y="165" width="0.6" height="15.0" fill="rgb(242,152,51)" rx="2" ry="2" />
<text  x="1065.54" y="175.5" ></text>
</g>
<g >
<title>getStreetSegmentCurvePoint (55 samples, 0.03%)</title><rect x="66.7" y="165" width="0.3" height="15.0" fill="rgb(228,116,40)" rx="2" ry="2" />
<text  x="69.66" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (28 samples, 0.01%)</title><rect x="1056.3" y="165" width="0.2" height="15.0" fill="rgb(207,58,35)" rx="2" ry="2" />
<text  x="1059.30" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (71 samples, 0.04%)</title><rect x="679.5" y="133" width="0.4" height="15.0" fill="rgb(241,57,17)" rx="2" ry="2" />
<text  x="682.47" y="143.5" ></text>
</g>
<g >
<title>strcmp@plt (41 samples, 0.02%)</title><rect x="1054.7" y="197" width="0.2" height="15.0" fill="rgb(248,183,4)" rx="2" ry="2" />
<text  x="1057.67" y="207.5" ></text>
</g>
<g >
<title>findStreetSegmentLength (192 samples, 0.09%)</title><rect x="66.1" y="181" width="1.1" height="15.0" fill="rgb(251,87,53)" rx="2" ry="2" />
<text  x="69.07" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (386 samples, 0.19%)</title><rect x="1016.9" y="197" width="2.2" height="15.0" fill="rgb(233,31,10)" rx="2" ry="2" />
<text  x="1019.90" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, int&gt;, true&gt; &gt;::max_size (23 samples, 0.01%)</title><rect x="1142.2" y="197" width="0.1" height="15.0" fill="rgb(236,200,41)" rx="2" ry="2" />
<text  x="1145.18" y="207.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_hard_public::TestMapFixturefindPathBetweenIntersections_perf_hard::RunImpl (167,756 samples, 82.96%)</title><rect x="22.3" y="261" width="978.9" height="15.0" fill="rgb(217,75,29)" rx="2" ry="2" />
<text  x="25.25" y="271.5" >Suiteinter_inter_path_perf_hard_public::TestMapFixturefindPathBetweenIntersections_perf_hard::RunImpl</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::end (129 samples, 0.06%)</title><rect x="864.2" y="181" width="0.8" height="15.0" fill="rgb(218,48,18)" rx="2" ry="2" />
<text  x="867.24" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (30 samples, 0.01%)</title><rect x="1178.2" y="117" width="0.2" height="15.0" fill="rgb(215,151,44)" rx="2" ry="2" />
<text  x="1181.24" y="127.5" ></text>
</g>
<g >
<title>adjlink::find_edge_of_a_node (396 samples, 0.20%)</title><rect x="1158.4" y="261" width="2.3" height="15.0" fill="rgb(211,17,28)" rx="2" ry="2" />
<text  x="1161.44" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, int&gt; const&amp;&gt; (208 samples, 0.10%)</title><rect x="666.8" y="133" width="1.2" height="15.0" fill="rgb(237,106,9)" rx="2" ry="2" />
<text  x="669.76" y="143.5" ></text>
</g>
<g >
<title>getTagPair[abi:cxx11] (409 samples, 0.20%)</title><rect x="1081.8" y="245" width="2.4" height="15.0" fill="rgb(229,173,25)" rx="2" ry="2" />
<text  x="1084.80" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate (18 samples, 0.01%)</title><rect x="1157.5" y="229" width="0.1" height="15.0" fill="rgb(243,21,26)" rx="2" ry="2" />
<text  x="1160.53" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, bool&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (490 samples, 0.24%)</title><rect x="470.9" y="149" width="2.9" height="15.0" fill="rgb(221,69,12)" rx="2" ry="2" />
<text  x="473.89" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (165 samples, 0.08%)</title><rect x="997.9" y="181" width="1.0" height="15.0" fill="rgb(253,63,16)" rx="2" ry="2" />
<text  x="1000.92" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (52 samples, 0.03%)</title><rect x="1170.5" y="197" width="0.3" height="15.0" fill="rgb(224,147,51)" rx="2" ry="2" />
<text  x="1173.47" y="207.5" ></text>
</g>
<g >
<title>malloc@plt (19 samples, 0.01%)</title><rect x="1066.6" y="181" width="0.1" height="15.0" fill="rgb(229,198,31)" rx="2" ry="2" />
<text  x="1069.63" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (12,503 samples, 6.18%)</title><rect x="1006.1" y="277" width="72.9" height="15.0" fill="rgb(253,150,19)" rx="2" ry="2" />
<text  x="1009.07" y="287.5" >boost::a..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::empty (402 samples, 0.20%)</title><rect x="997.9" y="197" width="2.4" height="15.0" fill="rgb(209,102,17)" rx="2" ry="2" />
<text  x="1000.92" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (57 samples, 0.03%)</title><rect x="1080.4" y="261" width="0.4" height="15.0" fill="rgb(233,65,25)" rx="2" ry="2" />
<text  x="1083.44" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (247 samples, 0.12%)</title><rect x="569.2" y="149" width="1.4" height="15.0" fill="rgb(230,5,4)" rx="2" ry="2" />
<text  x="572.20" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int, int&gt; &gt; (51 samples, 0.03%)</title><rect x="922.7" y="165" width="0.3" height="15.0" fill="rgb(233,147,39)" rx="2" ry="2" />
<text  x="925.73" y="175.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, long, std::pair&lt;int, int&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (22,166 samples, 10.96%)</title><rect x="731.8" y="149" width="129.4" height="15.0" fill="rgb(254,20,14)" rx="2" ry="2" />
<text  x="734.82" y="159.5" >std::__adjust_he..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;int&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (45 samples, 0.02%)</title><rect x="1172.6" y="181" width="0.2" height="15.0" fill="rgb(254,12,28)" rx="2" ry="2" />
<text  x="1175.59" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (14,125 samples, 6.99%)</title><rect x="376.5" y="165" width="82.4" height="15.0" fill="rgb(207,104,32)" rx="2" ry="2" />
<text  x="379.52" y="175.5" >std::_Has..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_move_assign (72 samples, 0.04%)</title><rect x="1167.7" y="245" width="0.4" height="15.0" fill="rgb(217,35,36)" rx="2" ry="2" />
<text  x="1170.71" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int const&amp;&gt;::_Tuple_impl (146 samples, 0.07%)</title><rect x="678.3" y="149" width="0.9" height="15.0" fill="rgb(234,77,41)" rx="2" ry="2" />
<text  x="681.33" y="159.5" ></text>
</g>
<g >
<title>[unknown] (33 samples, 0.02%)</title><rect x="1165.5" y="165" width="0.1" height="15.0" fill="rgb(209,51,42)" rx="2" ry="2" />
<text  x="1168.45" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (27 samples, 0.01%)</title><rect x="523.7" y="165" width="0.2" height="15.0" fill="rgb(234,102,9)" rx="2" ry="2" />
<text  x="526.74" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt;::max_size (76 samples, 0.04%)</title><rect x="489.0" y="149" width="0.5" height="15.0" fill="rgb(235,143,18)" rx="2" ry="2" />
<text  x="492.05" y="159.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.01%)</title><rect x="1165.7" y="133" width="0.2" height="15.0" fill="rgb(206,208,49)" rx="2" ry="2" />
<text  x="1168.73" y="143.5" ></text>
</g>
<g >
<title>std::move&lt;std::pair&lt;int, int&gt;&amp;&gt; (55 samples, 0.03%)</title><rect x="836.2" y="117" width="0.3" height="15.0" fill="rgb(212,71,0)" rx="2" ry="2" />
<text  x="839.22" y="127.5" ></text>
</g>
<g >
<title>memcpy@plt (30 samples, 0.01%)</title><rect x="1043.6" y="101" width="0.1" height="15.0" fill="rgb(250,189,1)" rx="2" ry="2" />
<text  x="1046.56" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (31 samples, 0.02%)</title><rect x="991.2" y="181" width="0.2" height="15.0" fill="rgb(219,59,47)" rx="2" ry="2" />
<text  x="994.18" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::allocate (618 samples, 0.31%)</title><rect x="705.6" y="165" width="3.6" height="15.0" fill="rgb(220,227,49)" rx="2" ry="2" />
<text  x="708.60" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::construct&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt; &gt; (320 samples, 0.16%)</title><rect x="920.9" y="165" width="1.8" height="15.0" fill="rgb(216,105,28)" rx="2" ry="2" />
<text  x="923.86" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt; &gt;::load_object_data (1,953 samples, 0.97%)</title><rect x="1055.5" y="213" width="11.4" height="15.0" fill="rgb(248,149,20)" rx="2" ry="2" />
<text  x="1058.51" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (79 samples, 0.04%)</title><rect x="1038.6" y="133" width="0.5" height="15.0" fill="rgb(209,7,39)" rx="2" ry="2" />
<text  x="1041.64" y="143.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (26 samples, 0.01%)</title><rect x="1155.8" y="133" width="0.2" height="15.0" fill="rgb(235,102,49)" rx="2" ry="2" />
<text  x="1158.84" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt;::_Hash_node (51 samples, 0.03%)</title><rect x="704.6" y="165" width="0.3" height="15.0" fill="rgb(209,190,45)" rx="2" ry="2" />
<text  x="707.61" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (258 samples, 0.13%)</title><rect x="831.3" y="101" width="1.5" height="15.0" fill="rgb(236,110,10)" rx="2" ry="2" />
<text  x="834.33" y="111.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (42 samples, 0.02%)</title><rect x="1176.6" y="149" width="0.3" height="15.0" fill="rgb(237,55,28)" rx="2" ry="2" />
<text  x="1179.63" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (48 samples, 0.02%)</title><rect x="643.1" y="149" width="0.2" height="15.0" fill="rgb(235,146,44)" rx="2" ry="2" />
<text  x="646.06" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (964 samples, 0.48%)</title><rect x="992.3" y="197" width="5.6" height="15.0" fill="rgb(248,201,2)" rx="2" ry="2" />
<text  x="995.30" y="207.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (42 samples, 0.02%)</title><rect x="863.0" y="133" width="0.2" height="15.0" fill="rgb(208,39,6)" rx="2" ry="2" />
<text  x="865.99" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (58 samples, 0.03%)</title><rect x="1177.5" y="133" width="0.3" height="15.0" fill="rgb(242,10,5)" rx="2" ry="2" />
<text  x="1180.49" y="143.5" ></text>
</g>
<g >
<title>cos@plt (22 samples, 0.01%)</title><rect x="66.4" y="149" width="0.1" height="15.0" fill="rgb(207,70,49)" rx="2" ry="2" />
<text  x="69.40" y="159.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.03%)</title><rect x="1175.9" y="181" width="0.4" height="15.0" fill="rgb(226,30,5)" rx="2" ry="2" />
<text  x="1178.94" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (3,094 samples, 1.53%)</title><rect x="653.3" y="181" width="18.1" height="15.0" fill="rgb(220,0,34)" rx="2" ry="2" />
<text  x="656.30" y="191.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (32 samples, 0.02%)</title><rect x="1018.1" y="149" width="0.2" height="15.0" fill="rgb(230,211,14)" rx="2" ry="2" />
<text  x="1021.10" y="159.5" ></text>
</g>
<g >
<title>LatLon::longitude (84 samples, 0.04%)</title><rect x="243.2" y="165" width="0.4" height="15.0" fill="rgb(244,62,30)" rx="2" ry="2" />
<text  x="246.15" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, bool&gt;&amp;&gt; (1,110 samples, 0.55%)</title><rect x="434.1" y="133" width="6.5" height="15.0" fill="rgb(219,220,0)" rx="2" ry="2" />
<text  x="437.09" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;OSMID, int&gt; &gt; (19 samples, 0.01%)</title><rect x="1151.2" y="229" width="0.1" height="15.0" fill="rgb(215,31,11)" rx="2" ry="2" />
<text  x="1154.17" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::max_size (52 samples, 0.03%)</title><rect x="577.4" y="149" width="0.3" height="15.0" fill="rgb(214,24,32)" rx="2" ry="2" />
<text  x="580.41" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt;::_Hash_node (24 samples, 0.01%)</title><rect x="590.5" y="165" width="0.1" height="15.0" fill="rgb(232,18,21)" rx="2" ry="2" />
<text  x="593.48" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt;::load_object_data (37 samples, 0.02%)</title><rect x="1079.3" y="181" width="0.2" height="15.0" fill="rgb(245,139,30)" rx="2" ry="2" />
<text  x="1082.33" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (452 samples, 0.22%)</title><rect x="663.1" y="149" width="2.6" height="15.0" fill="rgb(214,71,3)" rx="2" ry="2" />
<text  x="666.06" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;char, std::pair&lt;char const, TrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (39 samples, 0.02%)</title><rect x="21.4" y="117" width="0.2" height="15.0" fill="rgb(218,106,24)" rx="2" ry="2" />
<text  x="24.37" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (46 samples, 0.02%)</title><rect x="1046.0" y="101" width="0.2" height="15.0" fill="rgb(230,193,20)" rx="2" ry="2" />
<text  x="1048.96" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (4,995 samples, 2.47%)</title><rect x="329.6" y="181" width="29.2" height="15.0" fill="rgb(249,102,52)" rx="2" ry="2" />
<text  x="332.62" y="191.5" >st..</text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (69 samples, 0.03%)</title><rect x="1068.3" y="149" width="0.4" height="15.0" fill="rgb(211,71,50)" rx="2" ry="2" />
<text  x="1071.32" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;OSMID, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (216 samples, 0.11%)</title><rect x="1090.4" y="229" width="1.3" height="15.0" fill="rgb(219,2,21)" rx="2" ry="2" />
<text  x="1093.43" y="239.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (87 samples, 0.04%)</title><rect x="1074.7" y="85" width="0.5" height="15.0" fill="rgb(251,51,11)" rx="2" ry="2" />
<text  x="1077.68" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (178 samples, 0.09%)</title><rect x="937.9" y="149" width="1.0" height="15.0" fill="rgb(236,192,7)" rx="2" ry="2" />
<text  x="940.88" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (3,860 samples, 1.91%)</title><rect x="1118.2" y="213" width="22.5" height="15.0" fill="rgb(244,218,29)" rx="2" ry="2" />
<text  x="1121.19" y="223.5" >s..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (28 samples, 0.01%)</title><rect x="1178.9" y="117" width="0.2" height="15.0" fill="rgb(221,128,9)" rx="2" ry="2" />
<text  x="1181.95" y="127.5" ></text>
</g>
<g >
<title>memset@plt (19 samples, 0.01%)</title><rect x="1090.2" y="165" width="0.1" height="15.0" fill="rgb(205,140,22)" rx="2" ry="2" />
<text  x="1093.19" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (44 samples, 0.02%)</title><rect x="83.4" y="149" width="0.3" height="15.0" fill="rgb(251,147,51)" rx="2" ry="2" />
<text  x="86.44" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (409 samples, 0.20%)</title><rect x="673.1" y="181" width="2.4" height="15.0" fill="rgb(205,28,12)" rx="2" ry="2" />
<text  x="676.07" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (256 samples, 0.13%)</title><rect x="1023.1" y="181" width="1.5" height="15.0" fill="rgb(229,179,20)" rx="2" ry="2" />
<text  x="1026.13" y="191.5" ></text>
</g>
<g >
<title>strcmp@plt (231 samples, 0.11%)</title><rect x="1013.6" y="181" width="1.3" height="15.0" fill="rgb(225,111,15)" rx="2" ry="2" />
<text  x="1016.56" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (57 samples, 0.03%)</title><rect x="1038.3" y="117" width="0.3" height="15.0" fill="rgb(221,209,24)" rx="2" ry="2" />
<text  x="1041.31" y="127.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_hard_public::MapFixturefindPathBetweenIntersections_perf_hardHelper&gt; (167,756 samples, 82.96%)</title><rect x="22.3" y="245" width="978.9" height="15.0" fill="rgb(251,1,47)" rx="2" ry="2" />
<text  x="25.25" y="255.5" >UnitTest::ExecuteTest&lt;Suiteinter_inter_path_perf_hard_public::MapFixturefindPathBetweenIntersections_perf_hardHelper&gt;</text>
</g>
<g >
<title>strlen@plt (36 samples, 0.02%)</title><rect x="1092.5" y="213" width="0.2" height="15.0" fill="rgb(254,55,38)" rx="2" ry="2" />
<text  x="1095.49" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (326 samples, 0.16%)</title><rect x="1007.1" y="213" width="1.9" height="15.0" fill="rgb(240,106,12)" rx="2" ry="2" />
<text  x="1010.10" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (138 samples, 0.07%)</title><rect x="1065.8" y="165" width="0.8" height="15.0" fill="rgb(230,38,31)" rx="2" ry="2" />
<text  x="1068.82" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;char, std::pair&lt;char const, TrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (27 samples, 0.01%)</title><rect x="21.8" y="133" width="0.1" height="15.0" fill="rgb(233,139,5)" rx="2" ry="2" />
<text  x="24.77" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (52 samples, 0.03%)</title><rect x="1045.7" y="101" width="0.3" height="15.0" fill="rgb(219,223,19)" rx="2" ry="2" />
<text  x="1048.65" y="111.5" ></text>
</g>
<g >
<title>__dynamic_cast (77 samples, 0.04%)</title><rect x="1027.4" y="181" width="0.5" height="15.0" fill="rgb(221,104,22)" rx="2" ry="2" />
<text  x="1030.44" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, bool&gt;, false, false&gt;::_Node_iterator (153 samples, 0.08%)</title><rect x="475.0" y="165" width="0.9" height="15.0" fill="rgb(230,208,27)" rx="2" ry="2" />
<text  x="477.97" y="175.5" ></text>
</g>
<g >
<title>read@plt (56 samples, 0.03%)</title><rect x="1038.3" y="85" width="0.3" height="15.0" fill="rgb(223,53,20)" rx="2" ry="2" />
<text  x="1041.31" y="95.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;std::pair&lt;int, int&gt;, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt;::top (76 samples, 0.04%)</title><rect x="925.6" y="197" width="0.4" height="15.0" fill="rgb(217,194,44)" rx="2" ry="2" />
<text  x="928.59" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (200 samples, 0.10%)</title><rect x="1165.6" y="165" width="1.2" height="15.0" fill="rgb(251,54,51)" rx="2" ry="2" />
<text  x="1168.64" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (50 samples, 0.02%)</title><rect x="67.3" y="181" width="0.2" height="15.0" fill="rgb(213,212,34)" rx="2" ry="2" />
<text  x="70.25" y="191.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (35 samples, 0.02%)</title><rect x="1047.8" y="101" width="0.2" height="15.0" fill="rgb(254,182,33)" rx="2" ry="2" />
<text  x="1050.83" y="111.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (192 samples, 0.09%)</title><rect x="21.1" y="181" width="1.1" height="15.0" fill="rgb(239,121,7)" rx="2" ry="2" />
<text  x="24.09" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt; (373 samples, 0.18%)</title><rect x="920.8" y="181" width="2.2" height="15.0" fill="rgb(219,89,13)" rx="2" ry="2" />
<text  x="923.85" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (52 samples, 0.03%)</title><rect x="577.4" y="165" width="0.3" height="15.0" fill="rgb(251,219,8)" rx="2" ry="2" />
<text  x="580.41" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (32 samples, 0.02%)</title><rect x="1166.2" y="101" width="0.2" height="15.0" fill="rgb(207,199,5)" rx="2" ry="2" />
<text  x="1169.22" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,610 samples, 0.80%)</title><rect x="1068.2" y="181" width="9.4" height="15.0" fill="rgb(244,226,1)" rx="2" ry="2" />
<text  x="1071.16" y="191.5" ></text>
</g>
<g >
<title>malloc@plt (1,454 samples, 0.72%)</title><rect x="696.1" y="149" width="8.5" height="15.0" fill="rgb(254,5,49)" rx="2" ry="2" />
<text  x="699.13" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (81 samples, 0.04%)</title><rect x="1071.8" y="101" width="0.5" height="15.0" fill="rgb(244,112,49)" rx="2" ry="2" />
<text  x="1074.83" y="111.5" ></text>
</g>
<g >
<title>_int_malloc (8,672 samples, 4.29%)</title><rect x="869.0" y="133" width="50.6" height="15.0" fill="rgb(241,97,45)" rx="2" ry="2" />
<text  x="872.00" y="143.5" >_int_..</text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;::operator* (460 samples, 0.23%)</title><rect x="815.7" y="117" width="2.7" height="15.0" fill="rgb(229,2,2)" rx="2" ry="2" />
<text  x="818.67" y="127.5" ></text>
</g>
<g >
<title>memset@plt (145 samples, 0.07%)</title><rect x="312.5" y="181" width="0.9" height="15.0" fill="rgb(225,76,32)" rx="2" ry="2" />
<text  x="315.53" y="191.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (198 samples, 0.10%)</title><rect x="21.1" y="261" width="1.1" height="15.0" fill="rgb(252,85,45)" rx="2" ry="2" />
<text  x="24.08" y="271.5" ></text>
</g>
<g >
<title>[unknown] (145 samples, 0.07%)</title><rect x="1068.2" y="165" width="0.8" height="15.0" fill="rgb(220,123,45)" rx="2" ry="2" />
<text  x="1071.16" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (2,442 samples, 1.21%)</title><rect x="313.4" y="181" width="14.2" height="15.0" fill="rgb(236,106,35)" rx="2" ry="2" />
<text  x="316.38" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (259 samples, 0.13%)</title><rect x="133.6" y="165" width="1.5" height="15.0" fill="rgb(245,6,13)" rx="2" ry="2" />
<text  x="136.62" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::operator= (236 samples, 0.12%)</title><rect x="861.9" y="149" width="1.3" height="15.0" fill="rgb(221,70,0)" rx="2" ry="2" />
<text  x="864.86" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~vector (27 samples, 0.01%)</title><rect x="1003.8" y="229" width="0.2" height="15.0" fill="rgb(208,128,36)" rx="2" ry="2" />
<text  x="1006.81" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (55 samples, 0.03%)</title><rect x="570.6" y="149" width="0.4" height="15.0" fill="rgb(231,89,25)" rx="2" ry="2" />
<text  x="573.64" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (21 samples, 0.01%)</title><rect x="1067.4" y="181" width="0.1" height="15.0" fill="rgb(222,172,43)" rx="2" ry="2" />
<text  x="1070.42" y="191.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;::operator* (103 samples, 0.05%)</title><rect x="842.0" y="133" width="0.6" height="15.0" fill="rgb(243,154,38)" rx="2" ry="2" />
<text  x="845.02" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (104 samples, 0.05%)</title><rect x="1053.7" y="245" width="0.6" height="15.0" fill="rgb(245,77,52)" rx="2" ry="2" />
<text  x="1056.65" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, double&gt;::pair&lt;int const&amp;&gt; (117 samples, 0.06%)</title><rect x="578.9" y="149" width="0.7" height="15.0" fill="rgb(209,1,17)" rx="2" ry="2" />
<text  x="581.90" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::base (72 samples, 0.04%)</title><rect x="726.9" y="149" width="0.4" height="15.0" fill="rgb(217,216,44)" rx="2" ry="2" />
<text  x="729.92" y="159.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (20 samples, 0.01%)</title><rect x="1042.3" y="69" width="0.1" height="15.0" fill="rgb(251,145,30)" rx="2" ry="2" />
<text  x="1045.32" y="79.5" ></text>
</g>
<g >
<title>[unknown] (156 samples, 0.08%)</title><rect x="1176.9" y="149" width="1.0" height="15.0" fill="rgb(248,205,12)" rx="2" ry="2" />
<text  x="1179.94" y="159.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, int const&amp;&gt; (136 samples, 0.07%)</title><rect x="679.9" y="133" width="0.8" height="15.0" fill="rgb(238,162,12)" rx="2" ry="2" />
<text  x="682.88" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (63 samples, 0.03%)</title><rect x="991.9" y="181" width="0.4" height="15.0" fill="rgb(250,56,34)" rx="2" ry="2" />
<text  x="994.90" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt;::max_size (88 samples, 0.04%)</title><rect x="677.5" y="149" width="0.5" height="15.0" fill="rgb(223,126,47)" rx="2" ry="2" />
<text  x="680.53" y="159.5" ></text>
</g>
<g >
<title>cos@plt (831 samples, 0.41%)</title><rect x="243.6" y="165" width="4.9" height="15.0" fill="rgb(254,45,37)" rx="2" ry="2" />
<text  x="246.64" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (98 samples, 0.05%)</title><rect x="1187.1" y="101" width="0.6" height="15.0" fill="rgb(217,87,35)" rx="2" ry="2" />
<text  x="1190.12" y="111.5" ></text>
</g>
<g >
<title>memmove@plt (6,302 samples, 3.12%)</title><rect x="92.4" y="149" width="36.8" height="15.0" fill="rgb(210,219,5)" rx="2" ry="2" />
<text  x="95.41" y="159.5" >mem..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (37 samples, 0.02%)</title><rect x="1005.8" y="197" width="0.2" height="15.0" fill="rgb(242,123,6)" rx="2" ry="2" />
<text  x="1008.83" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (9,076 samples, 4.49%)</title><rect x="600.3" y="181" width="53.0" height="15.0" fill="rgb(223,52,25)" rx="2" ry="2" />
<text  x="603.34" y="191.5" >std::..</text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, int, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;int&gt; &gt; &gt; (37 samples, 0.02%)</title><rect x="1172.8" y="181" width="0.3" height="15.0" fill="rgb(249,52,3)" rx="2" ry="2" />
<text  x="1175.85" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (75 samples, 0.04%)</title><rect x="1076.0" y="101" width="0.4" height="15.0" fill="rgb(216,95,10)" rx="2" ry="2" />
<text  x="1078.99" y="111.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;OSMID const, int&gt;&amp;&gt; (19 samples, 0.01%)</title><rect x="1151.1" y="213" width="0.1" height="15.0" fill="rgb(213,101,39)" rx="2" ry="2" />
<text  x="1154.06" y="223.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (118 samples, 0.06%)</title><rect x="1021.4" y="213" width="0.6" height="15.0" fill="rgb(219,58,11)" rx="2" ry="2" />
<text  x="1024.35" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (173 samples, 0.09%)</title><rect x="1051.6" y="213" width="1.0" height="15.0" fill="rgb(227,70,48)" rx="2" ry="2" />
<text  x="1054.56" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_buckets (19 samples, 0.01%)</title><rect x="1090.2" y="181" width="0.1" height="15.0" fill="rgb(214,33,1)" rx="2" ry="2" />
<text  x="1093.19" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast (80 samples, 0.04%)</title><rect x="1040.2" y="149" width="0.5" height="15.0" fill="rgb(229,26,17)" rx="2" ry="2" />
<text  x="1043.19" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (94 samples, 0.05%)</title><rect x="467.6" y="149" width="0.6" height="15.0" fill="rgb(208,151,42)" rx="2" ry="2" />
<text  x="470.60" y="159.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.01%)</title><rect x="1157.3" y="229" width="0.2" height="15.0" fill="rgb(216,83,45)" rx="2" ry="2" />
<text  x="1160.31" y="239.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (25 samples, 0.01%)</title><rect x="1047.0" y="117" width="0.2" height="15.0" fill="rgb(225,186,41)" rx="2" ry="2" />
<text  x="1050.02" y="127.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.02%)</title><rect x="1169.0" y="229" width="0.2" height="15.0" fill="rgb(254,176,15)" rx="2" ry="2" />
<text  x="1172.00" y="239.5" ></text>
</g>
<g >
<title>_dl_relocate_object (47 samples, 0.02%)</title><rect x="1005.8" y="213" width="0.3" height="15.0" fill="rgb(217,178,49)" rx="2" ry="2" />
<text  x="1008.79" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::__detail::_Select1st, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (344 samples, 0.17%)</title><rect x="1138.2" y="181" width="2.0" height="15.0" fill="rgb(246,179,53)" rx="2" ry="2" />
<text  x="1141.18" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, bool&gt; &gt;::_M_valptr (92 samples, 0.05%)</title><rect x="516.5" y="165" width="0.6" height="15.0" fill="rgb(253,168,53)" rx="2" ry="2" />
<text  x="519.55" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (18 samples, 0.01%)</title><rect x="1074.1" y="117" width="0.1" height="15.0" fill="rgb(214,114,19)" rx="2" ry="2" />
<text  x="1077.09" y="127.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (145 samples, 0.07%)</title><rect x="944.1" y="149" width="0.9" height="15.0" fill="rgb(222,174,13)" rx="2" ry="2" />
<text  x="947.14" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::pair&lt;OSMID, int&gt; &gt; (23 samples, 0.01%)</title><rect x="1152.8" y="245" width="0.1" height="15.0" fill="rgb(221,130,47)" rx="2" ry="2" />
<text  x="1155.75" y="255.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (94 samples, 0.05%)</title><rect x="1040.7" y="149" width="0.5" height="15.0" fill="rgb(229,193,12)" rx="2" ry="2" />
<text  x="1043.65" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::base (48 samples, 0.02%)</title><rect x="998.6" y="165" width="0.3" height="15.0" fill="rgb(232,145,4)" rx="2" ry="2" />
<text  x="1001.61" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;OSMID, int&gt; &gt; (9,550 samples, 4.72%)</title><rect x="1097.0" y="245" width="55.8" height="15.0" fill="rgb(225,196,34)" rx="2" ry="2" />
<text  x="1100.02" y="255.5" >std::..</text>
</g>
<g >
<title>read@plt (55 samples, 0.03%)</title><rect x="1063.8" y="101" width="0.4" height="15.0" fill="rgb(213,217,2)" rx="2" ry="2" />
<text  x="1066.85" y="111.5" ></text>
</g>
<g >
<title>[unknown] (88 samples, 0.04%)</title><rect x="1067.3" y="197" width="0.5" height="15.0" fill="rgb(215,161,3)" rx="2" ry="2" />
<text  x="1070.25" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (8,635 samples, 4.27%)</title><rect x="602.9" y="165" width="50.4" height="15.0" fill="rgb(249,79,33)" rx="2" ry="2" />
<text  x="605.91" y="175.5" >std::..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (224 samples, 0.11%)</title><rect x="1163.7" y="245" width="1.3" height="15.0" fill="rgb(226,217,42)" rx="2" ry="2" />
<text  x="1166.73" y="255.5" ></text>
</g>
<g >
<title>std::make_pair&lt;LatLon&amp;, LatLon&amp;&gt; (945 samples, 0.47%)</title><rect x="276.8" y="181" width="5.5" height="15.0" fill="rgb(208,10,32)" rx="2" ry="2" />
<text  x="279.76" y="191.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (23,287 samples, 11.52%)</title><rect x="727.3" y="165" width="135.9" height="15.0" fill="rgb(206,183,17)" rx="2" ry="2" />
<text  x="730.34" y="175.5" >std::__pop_heap&lt;_..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (7,944 samples, 3.93%)</title><rect x="1006.2" y="245" width="46.4" height="15.0" fill="rgb(213,89,20)" rx="2" ry="2" />
<text  x="1009.21" y="255.5" >boos..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (25 samples, 0.01%)</title><rect x="1078.7" y="213" width="0.1" height="15.0" fill="rgb(250,195,37)" rx="2" ry="2" />
<text  x="1081.69" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;int*, int*, std::allocator&lt;int&gt; &gt; (105 samples, 0.05%)</title><rect x="1159.2" y="229" width="0.6" height="15.0" fill="rgb(252,157,53)" rx="2" ry="2" />
<text  x="1162.17" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::operator-&gt; (322 samples, 0.16%)</title><rect x="712.9" y="181" width="1.9" height="15.0" fill="rgb(229,111,31)" rx="2" ry="2" />
<text  x="715.93" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (35 samples, 0.02%)</title><rect x="342.4" y="165" width="0.2" height="15.0" fill="rgb(246,32,25)" rx="2" ry="2" />
<text  x="345.37" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (126 samples, 0.06%)</title><rect x="839.4" y="101" width="0.7" height="15.0" fill="rgb(212,212,45)" rx="2" ry="2" />
<text  x="842.36" y="111.5" ></text>
</g>
<g >
<title>operator new (157 samples, 0.08%)</title><rect x="1065.8" y="197" width="0.9" height="15.0" fill="rgb(241,96,21)" rx="2" ry="2" />
<text  x="1068.82" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (444 samples, 0.22%)</title><rect x="1165.0" y="229" width="2.6" height="15.0" fill="rgb(245,118,21)" rx="2" ry="2" />
<text  x="1168.04" y="239.5" ></text>
</g>
<g >
<title>RealOSMnode::RealOSMnode_insert (10,701 samples, 5.29%)</title><rect x="1093.3" y="261" width="62.5" height="15.0" fill="rgb(222,108,14)" rx="2" ry="2" />
<text  x="1096.32" y="271.5" >RealOS..</text>
</g>
<g >
<title>__dynamic_cast@plt (114 samples, 0.06%)</title><rect x="1016.2" y="197" width="0.7" height="15.0" fill="rgb(230,27,32)" rx="2" ry="2" />
<text  x="1019.23" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (466 samples, 0.23%)</title><rect x="130.6" y="165" width="2.7" height="15.0" fill="rgb(240,38,28)" rx="2" ry="2" />
<text  x="133.60" y="175.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (195 samples, 0.10%)</title><rect x="1155.8" y="245" width="1.1" height="15.0" fill="rgb(208,186,26)" rx="2" ry="2" />
<text  x="1158.78" y="255.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (215 samples, 0.11%)</title><rect x="1181.6" y="101" width="1.3" height="15.0" fill="rgb(214,188,29)" rx="2" ry="2" />
<text  x="1184.61" y="111.5" ></text>
</g>
<g >
<title>boost::movelib::detail_adaptive::adaptive_merge_impl&lt;boost::container::dtl::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;*, boost::container::dtl::flat_tree_value_compare&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight::IndexOrder, boost::container::dtl::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, boost::container::dtl::select1st&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;, boost::movelib::detail_adaptive::adaptive_xbuf&lt;boost::container::dtl::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, boost::container::dtl::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;*&gt; &gt; (76 samples, 0.04%)</title><rect x="1050.7" y="181" width="0.4" height="15.0" fill="rgb(219,227,9)" rx="2" ry="2" />
<text  x="1053.70" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (53 samples, 0.03%)</title><rect x="296.2" y="165" width="0.3" height="15.0" fill="rgb(212,218,3)" rx="2" ry="2" />
<text  x="299.20" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, int&gt;::pair&lt;int const&amp;&gt; (241 samples, 0.12%)</title><rect x="680.7" y="149" width="1.4" height="15.0" fill="rgb(237,226,24)" rx="2" ry="2" />
<text  x="683.68" y="159.5" ></text>
</g>
<g >
<title>memcmp@plt (46 samples, 0.02%)</title><rect x="1092.2" y="213" width="0.3" height="15.0" fill="rgb(214,145,45)" rx="2" ry="2" />
<text  x="1095.22" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt;::_M_default_append (25 samples, 0.01%)</title><rect x="1188.5" y="197" width="0.2" height="15.0" fill="rgb(236,51,46)" rx="2" ry="2" />
<text  x="1191.51" y="207.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int const&amp;&gt;::_M_head (111 samples, 0.05%)</title><rect x="678.3" y="133" width="0.7" height="15.0" fill="rgb(234,92,40)" rx="2" ry="2" />
<text  x="681.33" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (29 samples, 0.01%)</title><rect x="1182.9" y="101" width="0.1" height="15.0" fill="rgb(227,117,5)" rx="2" ry="2" />
<text  x="1185.86" y="111.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt;*&gt;::pointer_to (118 samples, 0.06%)</title><rect x="311.8" y="149" width="0.7" height="15.0" fill="rgb(239,37,47)" rx="2" ry="2" />
<text  x="314.84" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5,352 samples, 2.65%)</title><rect x="531.7" y="181" width="31.2" height="15.0" fill="rgb(241,118,2)" rx="2" ry="2" />
<text  x="534.70" y="191.5" >st..</text>
</g>
<g >
<title>std::make_pair&lt;LatLon&amp;, LatLon&amp;&gt; (24 samples, 0.01%)</title><rect x="67.0" y="165" width="0.2" height="15.0" fill="rgb(218,221,36)" rx="2" ry="2" />
<text  x="70.04" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (144 samples, 0.07%)</title><rect x="1092.1" y="245" width="0.9" height="15.0" fill="rgb(210,205,25)" rx="2" ry="2" />
<text  x="1095.14" y="255.5" ></text>
</g>
<g >
<title>malloc (8,672 samples, 4.29%)</title><rect x="869.0" y="149" width="50.6" height="15.0" fill="rgb(234,186,17)" rx="2" ry="2" />
<text  x="872.00" y="159.5" >malloc</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (120 samples, 0.06%)</title><rect x="473.8" y="165" width="0.7" height="15.0" fill="rgb(224,109,29)" rx="2" ry="2" />
<text  x="476.75" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (44 samples, 0.02%)</title><rect x="1185.2" y="69" width="0.3" height="15.0" fill="rgb(245,127,18)" rx="2" ry="2" />
<text  x="1188.24" y="79.5" ></text>
</g>
<g >
<title>malloc (1,012 samples, 0.50%)</title><rect x="580.2" y="149" width="5.9" height="15.0" fill="rgb(213,207,11)" rx="2" ry="2" />
<text  x="583.24" y="159.5" ></text>
</g>
<g >
<title>h (8,071 samples, 3.99%)</title><rect x="235.2" y="197" width="47.1" height="15.0" fill="rgb(216,163,39)" rx="2" ry="2" />
<text  x="238.17" y="207.5" >h</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (20 samples, 0.01%)</title><rect x="319.5" y="165" width="0.2" height="15.0" fill="rgb(241,216,51)" rx="2" ry="2" />
<text  x="322.55" y="175.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_hard_public::MapFixturefindPathBetweenIntersections_perf_hardHelper::RunImpl (167,756 samples, 82.96%)</title><rect x="22.3" y="229" width="978.9" height="15.0" fill="rgb(215,27,46)" rx="2" ry="2" />
<text  x="25.25" y="239.5" >Suiteinter_inter_path_perf_hard_public::MapFixturefindPathBetweenIntersections_perf_hardHelper::RunImpl</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (470 samples, 0.23%)</title><rect x="468.2" y="149" width="2.7" height="15.0" fill="rgb(227,109,36)" rx="2" ry="2" />
<text  x="471.15" y="159.5" ></text>
</g>
<g >
<title>_int_free (132 samples, 0.07%)</title><rect x="1002.3" y="229" width="0.8" height="15.0" fill="rgb(231,7,49)" rx="2" ry="2" />
<text  x="1005.35" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (444 samples, 0.22%)</title><rect x="1165.0" y="213" width="2.6" height="15.0" fill="rgb(228,20,49)" rx="2" ry="2" />
<text  x="1168.04" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::operator= (597 samples, 0.30%)</title><rect x="836.6" y="117" width="3.5" height="15.0" fill="rgb(219,65,31)" rx="2" ry="2" />
<text  x="839.61" y="127.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (60 samples, 0.03%)</title><rect x="1155.8" y="149" width="0.4" height="15.0" fill="rgb(228,104,54)" rx="2" ry="2" />
<text  x="1158.82" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (488 samples, 0.24%)</title><rect x="1087.5" y="213" width="2.8" height="15.0" fill="rgb(218,42,47)" rx="2" ry="2" />
<text  x="1090.45" y="223.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt;::push (72 samples, 0.04%)</title><rect x="1174.3" y="245" width="0.4" height="15.0" fill="rgb(213,196,3)" rx="2" ry="2" />
<text  x="1177.27" y="255.5" ></text>
</g>
<g >
<title>__libc_start_main (370 samples, 0.18%)</title><rect x="1002.3" y="277" width="2.2" height="15.0" fill="rgb(235,13,31)" rx="2" ry="2" />
<text  x="1005.34" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (75 samples, 0.04%)</title><rect x="1167.7" y="261" width="0.4" height="15.0" fill="rgb(232,3,44)" rx="2" ry="2" />
<text  x="1170.70" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (68 samples, 0.03%)</title><rect x="1183.4" y="101" width="0.4" height="15.0" fill="rgb(209,174,25)" rx="2" ry="2" />
<text  x="1186.39" y="111.5" ></text>
</g>
<g >
<title>std::move&lt;std::pair&lt;int, int&gt;&amp;&gt; (30 samples, 0.01%)</title><rect x="925.4" y="165" width="0.2" height="15.0" fill="rgb(232,203,35)" rx="2" ry="2" />
<text  x="928.42" y="175.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (202 samples, 0.10%)</title><rect x="21.1" y="277" width="1.2" height="15.0" fill="rgb(237,184,29)" rx="2" ry="2" />
<text  x="24.08" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::begin (237 samples, 0.12%)</title><rect x="998.9" y="181" width="1.4" height="15.0" fill="rgb(214,176,8)" rx="2" ry="2" />
<text  x="1001.89" y="191.5" ></text>
</g>
<g >
<title>operator new (3,631 samples, 1.80%)</title><rect x="495.0" y="165" width="21.2" height="15.0" fill="rgb(205,159,10)" rx="2" ry="2" />
<text  x="498.01" y="175.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (30 samples, 0.01%)</title><rect x="1056.3" y="181" width="0.2" height="15.0" fill="rgb(220,185,43)" rx="2" ry="2" />
<text  x="1059.29" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (148 samples, 0.07%)</title><rect x="1083.3" y="229" width="0.9" height="15.0" fill="rgb(246,125,31)" rx="2" ry="2" />
<text  x="1086.33" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt; &gt; &gt;::load_object_data (62 samples, 0.03%)</title><rect x="1079.2" y="213" width="0.4" height="15.0" fill="rgb(226,51,45)" rx="2" ry="2" />
<text  x="1082.21" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (68 samples, 0.03%)</title><rect x="1069.0" y="165" width="0.4" height="15.0" fill="rgb(218,130,46)" rx="2" ry="2" />
<text  x="1072.01" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (231 samples, 0.11%)</title><rect x="1013.6" y="197" width="1.3" height="15.0" fill="rgb(247,211,36)" rx="2" ry="2" />
<text  x="1016.56" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (34 samples, 0.02%)</title><rect x="1078.8" y="245" width="0.2" height="15.0" fill="rgb(213,106,20)" rx="2" ry="2" />
<text  x="1081.83" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt;::construct&lt;std::pair&lt;int const, bool&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (946 samples, 0.47%)</title><rect x="489.5" y="165" width="5.5" height="15.0" fill="rgb(246,94,52)" rx="2" ry="2" />
<text  x="492.49" y="175.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (195 samples, 0.10%)</title><rect x="21.1" y="229" width="1.1" height="15.0" fill="rgb(217,137,5)" rx="2" ry="2" />
<text  x="24.08" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (11,821 samples, 5.85%)</title><rect x="527.0" y="197" width="69.0" height="15.0" fill="rgb(233,180,54)" rx="2" ry="2" />
<text  x="530.00" y="207.5" >std::__..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (29 samples, 0.01%)</title><rect x="1069.2" y="149" width="0.2" height="15.0" fill="rgb(212,186,26)" rx="2" ry="2" />
<text  x="1072.23" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.01%)</title><rect x="1173.8" y="213" width="0.2" height="15.0" fill="rgb(206,40,33)" rx="2" ry="2" />
<text  x="1176.84" y="223.5" ></text>
</g>
<g >
<title>[unknown] (208 samples, 0.10%)</title><rect x="1074.4" y="101" width="1.2" height="15.0" fill="rgb(215,82,41)" rx="2" ry="2" />
<text  x="1077.38" y="111.5" ></text>
</g>
<g >
<title>[unknown] (678 samples, 0.34%)</title><rect x="1022.0" y="197" width="4.0" height="15.0" fill="rgb(212,187,46)" rx="2" ry="2" />
<text  x="1025.04" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (92 samples, 0.05%)</title><rect x="1004.0" y="213" width="0.5" height="15.0" fill="rgb(238,211,51)" rx="2" ry="2" />
<text  x="1006.96" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (108 samples, 0.05%)</title><rect x="1017.7" y="181" width="0.6" height="15.0" fill="rgb(245,197,8)" rx="2" ry="2" />
<text  x="1020.68" y="191.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.02%)</title><rect x="1077.2" y="149" width="0.2" height="15.0" fill="rgb(221,84,8)" rx="2" ry="2" />
<text  x="1080.21" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt;::_M_default_append (29 samples, 0.01%)</title><rect x="1080.6" y="229" width="0.2" height="15.0" fill="rgb(253,9,9)" rx="2" ry="2" />
<text  x="1083.60" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (63 samples, 0.03%)</title><rect x="1166.0" y="117" width="0.4" height="15.0" fill="rgb(221,23,16)" rx="2" ry="2" />
<text  x="1169.04" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash@plt (183 samples, 0.09%)</title><rect x="670.3" y="165" width="1.1" height="15.0" fill="rgb(217,166,49)" rx="2" ry="2" />
<text  x="673.29" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (703 samples, 0.35%)</title><rect x="558.8" y="149" width="4.1" height="15.0" fill="rgb(220,164,19)" rx="2" ry="2" />
<text  x="561.83" y="159.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (213 samples, 0.11%)</title><rect x="129.2" y="149" width="1.2" height="15.0" fill="rgb(235,39,11)" rx="2" ry="2" />
<text  x="132.18" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (22 samples, 0.01%)</title><rect x="1004.0" y="133" width="0.1" height="15.0" fill="rgb(252,128,27)" rx="2" ry="2" />
<text  x="1007.01" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (1,009 samples, 0.50%)</title><rect x="12.4" y="229" width="5.9" height="15.0" fill="rgb(248,187,19)" rx="2" ry="2" />
<text  x="15.39" y="239.5" ></text>
</g>
<g >
<title>adjlink::adj_insert (206 samples, 0.10%)</title><rect x="1157.2" y="261" width="1.2" height="15.0" fill="rgb(209,93,3)" rx="2" ry="2" />
<text  x="1160.19" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (38 samples, 0.02%)</title><rect x="1169.9" y="261" width="0.2" height="15.0" fill="rgb(211,96,16)" rx="2" ry="2" />
<text  x="1172.91" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (37 samples, 0.02%)</title><rect x="1188.1" y="165" width="0.2" height="15.0" fill="rgb(244,171,45)" rx="2" ry="2" />
<text  x="1191.13" y="175.5" ></text>
</g>
<g >
<title>memcpy@plt (73 samples, 0.04%)</title><rect x="1017.7" y="165" width="0.4" height="15.0" fill="rgb(205,52,51)" rx="2" ry="2" />
<text  x="1020.68" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (103 samples, 0.05%)</title><rect x="1036.9" y="149" width="0.6" height="15.0" fill="rgb(245,161,11)" rx="2" ry="2" />
<text  x="1039.94" y="159.5" ></text>
</g>
<g >
<title>malloc@plt (742 samples, 0.37%)</title><rect x="586.1" y="149" width="4.4" height="15.0" fill="rgb(214,156,46)" rx="2" ry="2" />
<text  x="589.15" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (89 samples, 0.04%)</title><rect x="474.5" y="165" width="0.5" height="15.0" fill="rgb(243,223,27)" rx="2" ry="2" />
<text  x="477.45" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (19 samples, 0.01%)</title><rect x="1175.4" y="197" width="0.1" height="15.0" fill="rgb(236,60,26)" rx="2" ry="2" />
<text  x="1178.37" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back (42 samples, 0.02%)</title><rect x="1158.1" y="245" width="0.3" height="15.0" fill="rgb(220,158,9)" rx="2" ry="2" />
<text  x="1161.15" y="255.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (26 samples, 0.01%)</title><rect x="1176.0" y="165" width="0.2" height="15.0" fill="rgb(233,198,37)" rx="2" ry="2" />
<text  x="1179.04" y="175.5" ></text>
</g>
<g >
<title>getStreetName[abi:cxx11] (55 samples, 0.03%)</title><rect x="1162.5" y="261" width="0.3" height="15.0" fill="rgb(238,209,13)" rx="2" ry="2" />
<text  x="1165.48" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (101 samples, 0.05%)</title><rect x="1020.8" y="213" width="0.6" height="15.0" fill="rgb(222,39,34)" rx="2" ry="2" />
<text  x="1023.76" y="223.5" ></text>
</g>
<g >
<title>memset@plt (91 samples, 0.05%)</title><rect x="1140.2" y="165" width="0.5" height="15.0" fill="rgb(225,4,20)" rx="2" ry="2" />
<text  x="1143.18" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;int*, int*, std::allocator&lt;int&gt; &gt; (43 samples, 0.02%)</title><rect x="1161.4" y="229" width="0.2" height="15.0" fill="rgb(229,224,37)" rx="2" ry="2" />
<text  x="1164.35" y="239.5" ></text>
</g>
<g >
<title>_int_malloc (19 samples, 0.01%)</title><rect x="21.2" y="85" width="0.1" height="15.0" fill="rgb(225,115,44)" rx="2" ry="2" />
<text  x="24.22" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, double&gt;, false, false&gt;::operator-&gt; (166 samples, 0.08%)</title><rect x="594.5" y="181" width="1.0" height="15.0" fill="rgb(231,31,26)" rx="2" ry="2" />
<text  x="597.54" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (21 samples, 0.01%)</title><rect x="1176.2" y="165" width="0.1" height="15.0" fill="rgb(224,155,34)" rx="2" ry="2" />
<text  x="1179.19" y="175.5" ></text>
</g>
<g >
<title>strcmp@plt (58 samples, 0.03%)</title><rect x="1177.5" y="117" width="0.3" height="15.0" fill="rgb(228,64,46)" rx="2" ry="2" />
<text  x="1180.49" y="127.5" ></text>
</g>
<g >
<title>getWayByIndex (45 samples, 0.02%)</title><rect x="1084.2" y="245" width="0.3" height="15.0" fill="rgb(219,82,30)" rx="2" ry="2" />
<text  x="1087.19" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (22 samples, 0.01%)</title><rect x="1169.6" y="261" width="0.1" height="15.0" fill="rgb(210,105,29)" rx="2" ry="2" />
<text  x="1172.60" y="271.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, bool, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt; &gt;::operator[] (4,003 samples, 1.98%)</title><rect x="945.3" y="197" width="23.3" height="15.0" fill="rgb(242,31,17)" rx="2" ry="2" />
<text  x="948.28" y="207.5" >s..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (27 samples, 0.01%)</title><rect x="1076.1" y="69" width="0.1" height="15.0" fill="rgb(218,162,11)" rx="2" ry="2" />
<text  x="1079.07" y="79.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (192 samples, 0.09%)</title><rect x="21.1" y="197" width="1.1" height="15.0" fill="rgb(205,144,11)" rx="2" ry="2" />
<text  x="24.09" y="207.5" ></text>
</g>
<g >
<title>std::make_pair&lt;int&amp;, int&amp;&gt; (1,026 samples, 0.51%)</title><rect x="715.6" y="197" width="6.0" height="15.0" fill="rgb(220,219,31)" rx="2" ry="2" />
<text  x="718.58" y="207.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; (36 samples, 0.02%)</title><rect x="705.4" y="165" width="0.2" height="15.0" fill="rgb(226,37,18)" rx="2" ry="2" />
<text  x="708.39" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (156 samples, 0.08%)</title><rect x="991.4" y="197" width="0.9" height="15.0" fill="rgb(231,92,20)" rx="2" ry="2" />
<text  x="994.36" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, double&gt; &gt;::_M_valptr (45 samples, 0.02%)</title><rect x="590.6" y="165" width="0.3" height="15.0" fill="rgb(214,9,46)" rx="2" ry="2" />
<text  x="593.62" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt;::_M_default_append (21 samples, 0.01%)</title><rect x="1066.8" y="197" width="0.1" height="15.0" fill="rgb(231,125,34)" rx="2" ry="2" />
<text  x="1069.78" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,499 samples, 0.74%)</title><rect x="1010.4" y="229" width="8.7" height="15.0" fill="rgb(230,222,28)" rx="2" ry="2" />
<text  x="1013.40" y="239.5" ></text>
</g>
<g >
<title>malloc (42 samples, 0.02%)</title><rect x="1051.2" y="165" width="0.3" height="15.0" fill="rgb(214,98,7)" rx="2" ry="2" />
<text  x="1054.23" y="175.5" ></text>
</g>
<g >
<title>loadMap (92 samples, 0.05%)</title><rect x="1004.0" y="245" width="0.5" height="15.0" fill="rgb(243,225,39)" rx="2" ry="2" />
<text  x="1006.96" y="255.5" ></text>
</g>
<g >
<title>malloc (2,200 samples, 1.09%)</title><rect x="683.3" y="149" width="12.8" height="15.0" fill="rgb(248,164,20)" rx="2" ry="2" />
<text  x="686.29" y="159.5" ></text>
</g>
<g >
<title>M3_Public_Perf_ (202,211 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(234,108,42)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >M3_Public_Perf_</text>
</g>
<g >
<title>malloc_consolidate (8,430 samples, 4.17%)</title><rect x="870.4" y="117" width="49.2" height="15.0" fill="rgb(217,141,26)" rx="2" ry="2" />
<text  x="873.41" y="127.5" >mall..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::pair&lt;int, int&gt; &gt; (377 samples, 0.19%)</title><rect x="938.9" y="165" width="2.2" height="15.0" fill="rgb(229,5,52)" rx="2" ry="2" />
<text  x="941.92" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (805 samples, 0.40%)</title><rect x="527.0" y="181" width="4.7" height="15.0" fill="rgb(236,14,26)" rx="2" ry="2" />
<text  x="530.00" y="191.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int const&amp;&gt;::_M_head (128 samples, 0.06%)</title><rect x="489.8" y="133" width="0.7" height="15.0" fill="rgb(214,122,50)" rx="2" ry="2" />
<text  x="492.75" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (104 samples, 0.05%)</title><rect x="83.1" y="165" width="0.6" height="15.0" fill="rgb(226,82,12)" rx="2" ry="2" />
<text  x="86.09" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::pair&lt;int, int&gt; &gt; (580 samples, 0.29%)</title><rect x="832.8" y="117" width="3.4" height="15.0" fill="rgb(248,35,24)" rx="2" ry="2" />
<text  x="835.83" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (555 samples, 0.27%)</title><rect x="1087.2" y="229" width="3.2" height="15.0" fill="rgb(247,79,26)" rx="2" ry="2" />
<text  x="1090.17" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, int&gt;, false, true&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, int&gt;, false, true&gt;, bool, true&gt; (114 samples, 0.06%)</title><rect x="1152.1" y="213" width="0.7" height="15.0" fill="rgb(209,177,16)" rx="2" ry="2" />
<text  x="1155.09" y="223.5" ></text>
</g>
<g >
<title>operator new (100 samples, 0.05%)</title><rect x="1078.1" y="181" width="0.6" height="15.0" fill="rgb(217,58,19)" rx="2" ry="2" />
<text  x="1081.08" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (186 samples, 0.09%)</title><rect x="1052.6" y="245" width="1.1" height="15.0" fill="rgb(236,162,52)" rx="2" ry="2" />
<text  x="1055.57" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (1,012 samples, 0.50%)</title><rect x="580.2" y="133" width="5.9" height="15.0" fill="rgb(252,87,54)" rx="2" ry="2" />
<text  x="583.24" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (109 samples, 0.05%)</title><rect x="668.3" y="165" width="0.6" height="15.0" fill="rgb(225,34,0)" rx="2" ry="2" />
<text  x="671.28" y="175.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (192 samples, 0.09%)</title><rect x="1155.8" y="229" width="1.1" height="15.0" fill="rgb(253,52,15)" rx="2" ry="2" />
<text  x="1158.79" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator++ (225 samples, 0.11%)</title><rect x="42.6" y="197" width="1.3" height="15.0" fill="rgb(214,38,38)" rx="2" ry="2" />
<text  x="45.57" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, bool&gt; &gt;::_M_v (986 samples, 0.49%)</title><rect x="480.9" y="181" width="5.8" height="15.0" fill="rgb(234,63,45)" rx="2" ry="2" />
<text  x="483.95" y="191.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.01%)</title><rect x="1161.1" y="229" width="0.1" height="15.0" fill="rgb(222,73,11)" rx="2" ry="2" />
<text  x="1164.13" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (50 samples, 0.02%)</title><rect x="1048.0" y="101" width="0.3" height="15.0" fill="rgb(236,14,37)" rx="2" ry="2" />
<text  x="1051.03" y="111.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (188 samples, 0.09%)</title><rect x="21.1" y="149" width="1.1" height="15.0" fill="rgb(248,117,7)" rx="2" ry="2" />
<text  x="24.09" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char, std::pair&lt;char const, TrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (20 samples, 0.01%)</title><rect x="21.4" y="101" width="0.1" height="15.0" fill="rgb(217,160,11)" rx="2" ry="2" />
<text  x="24.38" y="111.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;&gt;::tuple (187 samples, 0.09%)</title><rect x="682.1" y="149" width="1.1" height="15.0" fill="rgb(223,167,39)" rx="2" ry="2" />
<text  x="685.08" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (11,472 samples, 5.67%)</title><rect x="68.5" y="181" width="66.9" height="15.0" fill="rgb(205,152,15)" rx="2" ry="2" />
<text  x="71.49" y="191.5" >std::ve..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::__detail::_Select1st, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (47 samples, 0.02%)</title><rect x="1141.2" y="229" width="0.2" height="15.0" fill="rgb(207,139,27)" rx="2" ry="2" />
<text  x="1144.16" y="239.5" ></text>
</g>
<g >
<title>[unknown] (860 samples, 0.43%)</title><rect x="1056.7" y="181" width="5.1" height="15.0" fill="rgb(222,53,20)" rx="2" ry="2" />
<text  x="1059.74" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (65 samples, 0.03%)</title><rect x="1170.4" y="229" width="0.4" height="15.0" fill="rgb(243,195,16)" rx="2" ry="2" />
<text  x="1173.41" y="239.5" ></text>
</g>
<g >
<title>_int_malloc (2,428 samples, 1.20%)</title><rect x="495.1" y="133" width="14.2" height="15.0" fill="rgb(245,8,5)" rx="2" ry="2" />
<text  x="498.11" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (59 samples, 0.03%)</title><rect x="490.8" y="149" width="0.3" height="15.0" fill="rgb(208,63,3)" rx="2" ry="2" />
<text  x="493.75" y="159.5" ></text>
</g>
<g >
<title>loadMap (16,288 samples, 8.05%)</title><rect x="1080.8" y="277" width="95.1" height="15.0" fill="rgb(241,47,13)" rx="2" ry="2" />
<text  x="1083.81" y="287.5" >loadMap</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,991 samples, 0.98%)</title><rect x="358.8" y="181" width="11.6" height="15.0" fill="rgb(209,24,45)" rx="2" ry="2" />
<text  x="361.76" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, int&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (91 samples, 0.05%)</title><rect x="1140.2" y="181" width="0.5" height="15.0" fill="rgb(210,158,10)" rx="2" ry="2" />
<text  x="1143.18" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation, std::allocator&lt;OSMRelation&gt; &gt; &gt;::load_object_data (104 samples, 0.05%)</title><rect x="1053.7" y="261" width="0.6" height="15.0" fill="rgb(221,155,31)" rx="2" ry="2" />
<text  x="1056.65" y="271.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, int, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;int&gt; &gt; &gt; (317 samples, 0.16%)</title><rect x="1171.2" y="197" width="1.9" height="15.0" fill="rgb(226,220,52)" rx="2" ry="2" />
<text  x="1174.24" y="207.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;int*&gt; (29 samples, 0.01%)</title><rect x="1160.1" y="213" width="0.1" height="15.0" fill="rgb(241,149,21)" rx="2" ry="2" />
<text  x="1163.05" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::base (52 samples, 0.03%)</title><rect x="731.5" y="133" width="0.3" height="15.0" fill="rgb(211,206,26)" rx="2" ry="2" />
<text  x="734.52" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (33 samples, 0.02%)</title><rect x="1158.9" y="229" width="0.2" height="15.0" fill="rgb(206,160,8)" rx="2" ry="2" />
<text  x="1161.88" y="239.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (69 samples, 0.03%)</title><rect x="1072.7" y="117" width="0.4" height="15.0" fill="rgb(247,149,32)" rx="2" ry="2" />
<text  x="1075.74" y="127.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;::operator* (36 samples, 0.02%)</title><rect x="945.0" y="181" width="0.3" height="15.0" fill="rgb(244,136,17)" rx="2" ry="2" />
<text  x="948.05" y="191.5" ></text>
</g>
<g >
<title>[unknown] (124 samples, 0.06%)</title><rect x="1045.5" y="117" width="0.7" height="15.0" fill="rgb(207,52,10)" rx="2" ry="2" />
<text  x="1048.50" y="127.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;&gt;::tuple (106 samples, 0.05%)</title><rect x="579.6" y="149" width="0.6" height="15.0" fill="rgb(208,88,11)" rx="2" ry="2" />
<text  x="582.58" y="159.5" ></text>
</g>
<g >
<title>malloc@plt (21 samples, 0.01%)</title><rect x="1158.7" y="213" width="0.1" height="15.0" fill="rgb(239,149,0)" rx="2" ry="2" />
<text  x="1161.69" y="223.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (68 samples, 0.03%)</title><rect x="1183.4" y="85" width="0.4" height="15.0" fill="rgb(223,102,26)" rx="2" ry="2" />
<text  x="1186.39" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt; &gt;::_M_deallocate_node (2,745 samples, 1.36%)</title><rect x="296.5" y="165" width="16.0" height="15.0" fill="rgb(233,5,6)" rx="2" ry="2" />
<text  x="299.51" y="175.5" ></text>
</g>
<g >
<title>malloc (98 samples, 0.05%)</title><rect x="1187.1" y="117" width="0.6" height="15.0" fill="rgb(235,185,28)" rx="2" ry="2" />
<text  x="1190.12" y="127.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (245 samples, 0.12%)</title><rect x="1041.4" y="133" width="1.5" height="15.0" fill="rgb(226,210,54)" rx="2" ry="2" />
<text  x="1044.42" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (379 samples, 0.19%)</title><rect x="49.4" y="181" width="2.2" height="15.0" fill="rgb(219,68,27)" rx="2" ry="2" />
<text  x="52.36" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (40 samples, 0.02%)</title><rect x="1077.6" y="181" width="0.2" height="15.0" fill="rgb(254,91,0)" rx="2" ry="2" />
<text  x="1080.56" y="191.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false, true&gt;, bool&gt; (21 samples, 0.01%)</title><rect x="1091.7" y="229" width="0.2" height="15.0" fill="rgb(228,226,12)" rx="2" ry="2" />
<text  x="1094.74" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, bool&gt; &gt;::_M_v (200 samples, 0.10%)</title><rect x="470.9" y="133" width="1.2" height="15.0" fill="rgb(227,201,38)" rx="2" ry="2" />
<text  x="473.89" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, double&gt; const&amp;&gt; (37 samples, 0.02%)</title><rect x="570.3" y="117" width="0.2" height="15.0" fill="rgb(245,165,3)" rx="2" ry="2" />
<text  x="573.31" y="127.5" ></text>
</g>
<g >
<title>[unknown] (141 samples, 0.07%)</title><rect x="1044.7" y="133" width="0.8" height="15.0" fill="rgb(207,130,52)" rx="2" ry="2" />
<text  x="1047.68" y="143.5" ></text>
</g>
<g >
<title>OSMDatabase::buildOSMIDMaps (1,896 samples, 0.94%)</title><rect x="10.0" y="277" width="11.1" height="15.0" fill="rgb(221,35,34)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.01%)</title><rect x="1170.8" y="213" width="0.2" height="15.0" fill="rgb(226,117,6)" rx="2" ry="2" />
<text  x="1173.82" y="223.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;OSMID, int&gt; &gt; (23 samples, 0.01%)</title><rect x="1152.8" y="229" width="0.1" height="15.0" fill="rgb(246,90,1)" rx="2" ry="2" />
<text  x="1155.75" y="239.5" ></text>
</g>
<g >
<title>strcmp@plt (46 samples, 0.02%)</title><rect x="1046.0" y="85" width="0.2" height="15.0" fill="rgb(213,158,10)" rx="2" ry="2" />
<text  x="1048.96" y="95.5" ></text>
</g>
<g >
<title>strcmp@plt (179 samples, 0.09%)</title><rect x="1024.6" y="165" width="1.1" height="15.0" fill="rgb(216,82,21)" rx="2" ry="2" />
<text  x="1027.63" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (18 samples, 0.01%)</title><rect x="578.2" y="149" width="0.1" height="15.0" fill="rgb(208,58,4)" rx="2" ry="2" />
<text  x="581.20" y="159.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt;*&gt;::pointer_to (91 samples, 0.05%)</title><rect x="358.2" y="149" width="0.6" height="15.0" fill="rgb(223,188,13)" rx="2" ry="2" />
<text  x="361.23" y="159.5" ></text>
</g>
<g >
<title>UnitTest::ExecuteTest&lt;UnitTest::Test&gt; (167,756 samples, 82.96%)</title><rect x="22.3" y="277" width="978.9" height="15.0" fill="rgb(254,1,41)" rx="2" ry="2" />
<text  x="25.25" y="287.5" >UnitTest::ExecuteTest&lt;UnitTest::Test&gt;</text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (72 samples, 0.04%)</title><rect x="1071.2" y="117" width="0.4" height="15.0" fill="rgb(249,219,42)" rx="2" ry="2" />
<text  x="1074.20" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (488 samples, 0.24%)</title><rect x="1087.5" y="197" width="2.8" height="15.0" fill="rgb(245,128,4)" rx="2" ry="2" />
<text  x="1090.45" y="207.5" ></text>
</g>
<g >
<title>[unknown] (1,294 samples, 0.64%)</title><rect x="1028.5" y="165" width="7.5" height="15.0" fill="rgb(245,10,38)" rx="2" ry="2" />
<text  x="1031.50" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (66 samples, 0.03%)</title><rect x="135.4" y="181" width="0.4" height="15.0" fill="rgb(239,9,21)" rx="2" ry="2" />
<text  x="138.44" y="191.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.02%)</title><rect x="1167.2" y="165" width="0.2" height="15.0" fill="rgb(247,167,51)" rx="2" ry="2" />
<text  x="1170.24" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (15,177 samples, 7.51%)</title><rect x="370.4" y="181" width="88.5" height="15.0" fill="rgb(236,135,40)" rx="2" ry="2" />
<text  x="373.38" y="191.5" >std::_Hash..</text>
</g>
<g >
<title>std::pair&lt;OSMID, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;OSMID&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, true&gt; (33 samples, 0.02%)</title><rect x="1091.9" y="229" width="0.2" height="15.0" fill="rgb(233,221,37)" rx="2" ry="2" />
<text  x="1094.95" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,056 samples, 1.02%)</title><rect x="1054.9" y="229" width="12.0" height="15.0" fill="rgb(220,57,38)" rx="2" ry="2" />
<text  x="1057.91" y="239.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int const&amp;&gt;::_Tuple_impl (171 samples, 0.08%)</title><rect x="489.8" y="149" width="1.0" height="15.0" fill="rgb(238,143,16)" rx="2" ry="2" />
<text  x="492.75" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (248 samples, 0.12%)</title><rect x="1043.1" y="133" width="1.4" height="15.0" fill="rgb(207,123,6)" rx="2" ry="2" />
<text  x="1046.10" y="143.5" ></text>
</g>
<g >
<title>malloc (125 samples, 0.06%)</title><rect x="1188.8" y="277" width="0.7" height="15.0" fill="rgb(220,76,52)" rx="2" ry="2" />
<text  x="1191.79" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_deallocate_node (2,775 samples, 1.37%)</title><rect x="342.6" y="165" width="16.2" height="15.0" fill="rgb(235,202,7)" rx="2" ry="2" />
<text  x="345.57" y="175.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (46 samples, 0.02%)</title><rect x="1042.2" y="101" width="0.2" height="15.0" fill="rgb(243,60,14)" rx="2" ry="2" />
<text  x="1045.17" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (28 samples, 0.01%)</title><rect x="1054.0" y="149" width="0.1" height="15.0" fill="rgb(215,46,41)" rx="2" ry="2" />
<text  x="1056.96" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (660 samples, 0.33%)</title><rect x="1044.7" y="149" width="3.8" height="15.0" fill="rgb(241,31,24)" rx="2" ry="2" />
<text  x="1047.68" y="159.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (55 samples, 0.03%)</title><rect x="1063.8" y="117" width="0.4" height="15.0" fill="rgb(244,192,33)" rx="2" ry="2" />
<text  x="1066.85" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (351 samples, 0.17%)</title><rect x="1074.4" y="117" width="2.0" height="15.0" fill="rgb(244,92,52)" rx="2" ry="2" />
<text  x="1077.38" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (38 samples, 0.02%)</title><rect x="1047.6" y="85" width="0.2" height="15.0" fill="rgb(212,72,35)" rx="2" ry="2" />
<text  x="1050.61" y="95.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (90 samples, 0.04%)</title><rect x="1063.6" y="149" width="0.6" height="15.0" fill="rgb(252,114,33)" rx="2" ry="2" />
<text  x="1066.65" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (27 samples, 0.01%)</title><rect x="1069.8" y="117" width="0.2" height="15.0" fill="rgb(247,56,1)" rx="2" ry="2" />
<text  x="1072.81" y="127.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::operator= (25 samples, 0.01%)</title><rect x="721.8" y="197" width="0.2" height="15.0" fill="rgb(223,138,18)" rx="2" ry="2" />
<text  x="724.82" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (27 samples, 0.01%)</title><rect x="1169.0" y="197" width="0.2" height="15.0" fill="rgb(236,212,46)" rx="2" ry="2" />
<text  x="1172.00" y="207.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (17,025 samples, 8.42%)</title><rect x="135.8" y="197" width="99.4" height="15.0" fill="rgb(216,187,46)" rx="2" ry="2" />
<text  x="138.82" y="207.5" >getStreetSeg..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (21 samples, 0.01%)</title><rect x="1168.5" y="245" width="0.1" height="15.0" fill="rgb(226,135,7)" rx="2" ry="2" />
<text  x="1171.46" y="255.5" ></text>
</g>
<g >
<title>do_lookup_x (34 samples, 0.02%)</title><rect x="1005.8" y="181" width="0.2" height="15.0" fill="rgb(208,174,50)" rx="2" ry="2" />
<text  x="1008.85" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (69 samples, 0.03%)</title><rect x="1072.7" y="101" width="0.4" height="15.0" fill="rgb(235,220,42)" rx="2" ry="2" />
<text  x="1075.74" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (28 samples, 0.01%)</title><rect x="1004.2" y="117" width="0.1" height="15.0" fill="rgb(233,110,31)" rx="2" ry="2" />
<text  x="1007.19" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (1,679 samples, 0.83%)</title><rect x="1039.1" y="165" width="9.8" height="15.0" fill="rgb(253,6,31)" rx="2" ry="2" />
<text  x="1042.10" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (45 samples, 0.02%)</title><rect x="1045.2" y="117" width="0.3" height="15.0" fill="rgb(210,21,1)" rx="2" ry="2" />
<text  x="1048.24" y="127.5" ></text>
</g>
<g >
<title>malloc (1,009 samples, 0.50%)</title><rect x="12.4" y="245" width="5.9" height="15.0" fill="rgb(237,162,47)" rx="2" ry="2" />
<text  x="15.39" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (82 samples, 0.04%)</title><rect x="1044.1" y="117" width="0.4" height="15.0" fill="rgb(246,120,28)" rx="2" ry="2" />
<text  x="1047.07" y="127.5" ></text>
</g>
<g >
<title>operator new (8,672 samples, 4.29%)</title><rect x="869.0" y="165" width="50.6" height="15.0" fill="rgb(207,101,31)" rx="2" ry="2" />
<text  x="872.00" y="175.5" >opera..</text>
</g>
<g >
<title>_int_malloc (118 samples, 0.06%)</title><rect x="1090.5" y="181" width="0.7" height="15.0" fill="rgb(207,37,45)" rx="2" ry="2" />
<text  x="1093.54" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (28 samples, 0.01%)</title><rect x="578.3" y="133" width="0.2" height="15.0" fill="rgb(243,135,37)" rx="2" ry="2" />
<text  x="581.31" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt;::allocate (76 samples, 0.04%)</title><rect x="489.0" y="165" width="0.5" height="15.0" fill="rgb(251,203,42)" rx="2" ry="2" />
<text  x="492.05" y="175.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (77 samples, 0.04%)</title><rect x="1027.4" y="165" width="0.5" height="15.0" fill="rgb(250,71,42)" rx="2" ry="2" />
<text  x="1030.44" y="175.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (27 samples, 0.01%)</title><rect x="1073.3" y="85" width="0.1" height="15.0" fill="rgb(211,181,26)" rx="2" ry="2" />
<text  x="1076.26" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (308 samples, 0.15%)</title><rect x="1048.9" y="181" width="1.8" height="15.0" fill="rgb(220,26,41)" rx="2" ry="2" />
<text  x="1051.90" y="191.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (192 samples, 0.09%)</title><rect x="21.1" y="165" width="1.1" height="15.0" fill="rgb(205,85,53)" rx="2" ry="2" />
<text  x="24.09" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (84 samples, 0.04%)</title><rect x="1183.8" y="101" width="0.5" height="15.0" fill="rgb(213,217,47)" rx="2" ry="2" />
<text  x="1186.79" y="111.5" ></text>
</g>
<g >
<title>memset@plt (341 samples, 0.17%)</title><rect x="327.6" y="181" width="2.0" height="15.0" fill="rgb(234,101,18)" rx="2" ry="2" />
<text  x="330.63" y="191.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (65 samples, 0.03%)</title><rect x="66.1" y="165" width="0.4" height="15.0" fill="rgb(250,218,23)" rx="2" ry="2" />
<text  x="69.15" y="175.5" ></text>
</g>
<g >
<title>operator new@plt (71 samples, 0.04%)</title><rect x="20.4" y="261" width="0.4" height="15.0" fill="rgb(250,111,13)" rx="2" ry="2" />
<text  x="23.36" y="271.5" ></text>
</g>
<g >
<title>_int_free (39 samples, 0.02%)</title><rect x="22.3" y="213" width="0.2" height="15.0" fill="rgb(205,156,10)" rx="2" ry="2" />
<text  x="25.25" y="223.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (30 samples, 0.01%)</title><rect x="130.4" y="149" width="0.2" height="15.0" fill="rgb(246,142,28)" rx="2" ry="2" />
<text  x="133.43" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (227 samples, 0.11%)</title><rect x="926.9" y="181" width="1.3" height="15.0" fill="rgb(242,159,30)" rx="2" ry="2" />
<text  x="929.91" y="191.5" ></text>
</g>
<g >
<title>strcmp@plt (26 samples, 0.01%)</title><rect x="1067.5" y="165" width="0.2" height="15.0" fill="rgb(242,229,52)" rx="2" ry="2" />
<text  x="1070.54" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (70 samples, 0.03%)</title><rect x="1178.0" y="133" width="0.4" height="15.0" fill="rgb(216,46,33)" rx="2" ry="2" />
<text  x="1181.00" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (523 samples, 0.26%)</title><rect x="1036.0" y="165" width="3.1" height="15.0" fill="rgb(225,112,28)" rx="2" ry="2" />
<text  x="1039.05" y="175.5" ></text>
</g>
<g >
<title>std::swap&lt;int*&gt; (46 samples, 0.02%)</title><rect x="1167.8" y="213" width="0.3" height="15.0" fill="rgb(221,127,47)" rx="2" ry="2" />
<text  x="1170.84" y="223.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, bool&gt;&amp;&gt; (246 samples, 0.12%)</title><rect x="439.1" y="117" width="1.5" height="15.0" fill="rgb(215,134,38)" rx="2" ry="2" />
<text  x="442.14" y="127.5" ></text>
</g>
<g >
<title>strcmp@plt (70 samples, 0.03%)</title><rect x="1075.2" y="69" width="0.4" height="15.0" fill="rgb(224,67,0)" rx="2" ry="2" />
<text  x="1078.19" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt;, std::allocator&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; (93 samples, 0.05%)</title><rect x="1166.9" y="181" width="0.6" height="15.0" fill="rgb(218,30,50)" rx="2" ry="2" />
<text  x="1169.93" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (165 samples, 0.08%)</title><rect x="41.6" y="197" width="1.0" height="15.0" fill="rgb(225,34,54)" rx="2" ry="2" />
<text  x="44.61" y="207.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (49 samples, 0.02%)</title><rect x="679.2" y="149" width="0.3" height="15.0" fill="rgb(229,124,42)" rx="2" ry="2" />
<text  x="682.18" y="159.5" ></text>
</g>
<g >
<title>memcpy@plt (39 samples, 0.02%)</title><rect x="1038.1" y="117" width="0.2" height="15.0" fill="rgb(247,164,53)" rx="2" ry="2" />
<text  x="1041.08" y="127.5" ></text>
</g>
<g >
<title>malloc_consolidate (39 samples, 0.02%)</title><rect x="22.3" y="197" width="0.2" height="15.0" fill="rgb(251,152,38)" rx="2" ry="2" />
<text  x="25.25" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (212 samples, 0.10%)</title><rect x="730.6" y="149" width="1.2" height="15.0" fill="rgb(218,26,12)" rx="2" ry="2" />
<text  x="733.58" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (70 samples, 0.03%)</title><rect x="1075.2" y="85" width="0.4" height="15.0" fill="rgb(236,171,24)" rx="2" ry="2" />
<text  x="1078.19" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (390 samples, 0.19%)</title><rect x="89.7" y="133" width="2.3" height="15.0" fill="rgb(215,61,28)" rx="2" ry="2" />
<text  x="92.74" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (60 samples, 0.03%)</title><rect x="923.5" y="165" width="0.3" height="15.0" fill="rgb(219,72,13)" rx="2" ry="2" />
<text  x="926.49" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (444 samples, 0.22%)</title><rect x="1165.0" y="245" width="2.6" height="15.0" fill="rgb(245,55,21)" rx="2" ry="2" />
<text  x="1168.04" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (68 samples, 0.03%)</title><rect x="92.0" y="149" width="0.4" height="15.0" fill="rgb(239,0,41)" rx="2" ry="2" />
<text  x="95.01" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (56 samples, 0.03%)</title><rect x="1076.4" y="117" width="0.4" height="15.0" fill="rgb(243,209,40)" rx="2" ry="2" />
<text  x="1079.43" y="127.5" ></text>
</g>
<g >
<title>getTagCount (19 samples, 0.01%)</title><rect x="1081.7" y="245" width="0.1" height="15.0" fill="rgb(237,29,30)" rx="2" ry="2" />
<text  x="1084.69" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (49 samples, 0.02%)</title><rect x="1169.2" y="229" width="0.3" height="15.0" fill="rgb(224,138,42)" rx="2" ry="2" />
<text  x="1172.21" y="239.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.02%)</title><rect x="1080.2" y="213" width="0.2" height="15.0" fill="rgb(207,201,38)" rx="2" ry="2" />
<text  x="1083.16" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, double&gt; &gt;::_M_v (372 samples, 0.18%)</title><rect x="554.0" y="133" width="2.1" height="15.0" fill="rgb(253,190,14)" rx="2" ry="2" />
<text  x="556.97" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;, std::pair&lt;int, int&gt;*&gt; (27 samples, 0.01%)</title><rect x="919.6" y="165" width="0.2" height="15.0" fill="rgb(242,113,25)" rx="2" ry="2" />
<text  x="922.64" y="175.5" ></text>
</g>
<g >
<title>malloc (118 samples, 0.06%)</title><rect x="1090.5" y="197" width="0.7" height="15.0" fill="rgb(239,183,11)" rx="2" ry="2" />
<text  x="1093.54" y="207.5" ></text>
</g>
<g >
<title>strcmp@plt (215 samples, 0.11%)</title><rect x="1181.6" y="85" width="1.3" height="15.0" fill="rgb(232,102,6)" rx="2" ry="2" />
<text  x="1184.61" y="95.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (68 samples, 0.03%)</title><rect x="1177.1" y="133" width="0.4" height="15.0" fill="rgb(229,131,17)" rx="2" ry="2" />
<text  x="1180.09" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (3,149 samples, 1.56%)</title><rect x="576.2" y="181" width="18.3" height="15.0" fill="rgb(225,183,11)" rx="2" ry="2" />
<text  x="579.16" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::end (140 samples, 0.07%)</title><rect x="923.0" y="181" width="0.8" height="15.0" fill="rgb(228,128,12)" rx="2" ry="2" />
<text  x="926.03" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (183 samples, 0.09%)</title><rect x="665.7" y="133" width="1.1" height="15.0" fill="rgb(206,217,7)" rx="2" ry="2" />
<text  x="668.69" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;LatLon&amp;&gt; (68 samples, 0.03%)</title><rect x="281.9" y="149" width="0.4" height="15.0" fill="rgb(216,91,46)" rx="2" ry="2" />
<text  x="284.88" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, bool&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (625 samples, 0.31%)</title><rect x="520.1" y="165" width="3.6" height="15.0" fill="rgb(236,76,31)" rx="2" ry="2" />
<text  x="523.10" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (48 samples, 0.02%)</title><rect x="1047.3" y="85" width="0.3" height="15.0" fill="rgb(247,171,12)" rx="2" ry="2" />
<text  x="1050.33" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (27 samples, 0.01%)</title><rect x="1003.3" y="229" width="0.1" height="15.0" fill="rgb(232,122,40)" rx="2" ry="2" />
<text  x="1006.26" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator-- (121 samples, 0.06%)</title><rect x="725.2" y="165" width="0.7" height="15.0" fill="rgb(208,193,46)" rx="2" ry="2" />
<text  x="728.24" y="175.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (59 samples, 0.03%)</title><rect x="1176.5" y="165" width="0.4" height="15.0" fill="rgb(239,48,21)" rx="2" ry="2" />
<text  x="1179.53" y="175.5" ></text>
</g>
<g >
<title>[unknown] (114 samples, 0.06%)</title><rect x="1047.2" y="101" width="0.6" height="15.0" fill="rgb(221,89,43)" rx="2" ry="2" />
<text  x="1050.16" y="111.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, int const&amp;&gt; (73 samples, 0.04%)</title><rect x="578.5" y="133" width="0.4" height="15.0" fill="rgb(246,73,29)" rx="2" ry="2" />
<text  x="581.47" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash@plt (183 samples, 0.09%)</title><rect x="475.9" y="165" width="1.0" height="15.0" fill="rgb(251,121,20)" rx="2" ry="2" />
<text  x="478.86" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator+ (168 samples, 0.08%)</title><rect x="1171.6" y="181" width="1.0" height="15.0" fill="rgb(243,229,6)" rx="2" ry="2" />
<text  x="1174.61" y="191.5" ></text>
</g>
<g >
<title>malloc (20 samples, 0.01%)</title><rect x="1157.3" y="213" width="0.1" height="15.0" fill="rgb(213,166,54)" rx="2" ry="2" />
<text  x="1160.31" y="223.5" ></text>
</g>
<g >
<title>checkOpen (426 samples, 0.21%)</title><rect x="232.7" y="181" width="2.5" height="15.0" fill="rgb(206,68,26)" rx="2" ry="2" />
<text  x="235.69" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt; &gt;::load_object_data (8,154 samples, 4.03%)</title><rect x="1006.1" y="261" width="47.6" height="15.0" fill="rgb(210,172,7)" rx="2" ry="2" />
<text  x="1009.07" y="271.5" >boos..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::get_library_version@plt (23 samples, 0.01%)</title><rect x="1044.5" y="149" width="0.2" height="15.0" fill="rgb(218,141,43)" rx="2" ry="2" />
<text  x="1047.54" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; &gt;::load_object_data (58 samples, 0.03%)</title><rect x="1165.0" y="197" width="0.4" height="15.0" fill="rgb(252,224,29)" rx="2" ry="2" />
<text  x="1168.04" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (31 samples, 0.02%)</title><rect x="1056.5" y="181" width="0.2" height="15.0" fill="rgb(250,34,52)" rx="2" ry="2" />
<text  x="1059.52" y="191.5" ></text>
</g>
<g >
<title>operator new (1,762 samples, 0.87%)</title><rect x="580.2" y="165" width="10.3" height="15.0" fill="rgb(225,84,6)" rx="2" ry="2" />
<text  x="583.20" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt; &gt; &gt; &gt; (141 samples, 0.07%)</title><rect x="1079.6" y="229" width="0.8" height="15.0" fill="rgb(253,59,42)" rx="2" ry="2" />
<text  x="1082.61" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt;::_M_default_append (224 samples, 0.11%)</title><rect x="1163.7" y="181" width="1.3" height="15.0" fill="rgb(247,3,10)" rx="2" ry="2" />
<text  x="1166.73" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (38 samples, 0.02%)</title><rect x="1174.4" y="229" width="0.2" height="15.0" fill="rgb(239,10,34)" rx="2" ry="2" />
<text  x="1177.36" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (58 samples, 0.03%)</title><rect x="999.9" y="165" width="0.4" height="15.0" fill="rgb(254,132,12)" rx="2" ry="2" />
<text  x="1002.93" y="175.5" ></text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::less&lt;int&gt; &gt; (162 samples, 0.08%)</title><rect x="1174.7" y="245" width="0.9" height="15.0" fill="rgb(225,8,16)" rx="2" ry="2" />
<text  x="1177.69" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::emplace_back&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (18 samples, 0.01%)</title><rect x="1170.1" y="261" width="0.1" height="15.0" fill="rgb(215,141,16)" rx="2" ry="2" />
<text  x="1173.14" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (23 samples, 0.01%)</title><rect x="1046.6" y="101" width="0.1" height="15.0" fill="rgb(242,35,48)" rx="2" ry="2" />
<text  x="1049.59" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, std::pair&lt;int const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (2,109 samples, 1.04%)</title><rect x="428.3" y="149" width="12.3" height="15.0" fill="rgb(230,225,24)" rx="2" ry="2" />
<text  x="431.26" y="159.5" ></text>
</g>
<g >
<title>malloc@plt (20 samples, 0.01%)</title><rect x="1048.7" y="133" width="0.2" height="15.0" fill="rgb(226,27,30)" rx="2" ry="2" />
<text  x="1051.73" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (37 samples, 0.02%)</title><rect x="1160.4" y="245" width="0.2" height="15.0" fill="rgb(222,139,12)" rx="2" ry="2" />
<text  x="1163.41" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt; &gt;::load_object_data (29 samples, 0.01%)</title><rect x="1080.6" y="245" width="0.2" height="15.0" fill="rgb(219,4,54)" rx="2" ry="2" />
<text  x="1083.60" y="255.5" ></text>
</g>
<g >
<title>strcmp@plt (45 samples, 0.02%)</title><rect x="1045.2" y="101" width="0.3" height="15.0" fill="rgb(216,156,20)" rx="2" ry="2" />
<text  x="1048.24" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (34 samples, 0.02%)</title><rect x="1187.9" y="165" width="0.2" height="15.0" fill="rgb(249,128,35)" rx="2" ry="2" />
<text  x="1190.93" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,201 samples, 1.09%)</title><rect x="1175.9" y="261" width="12.8" height="15.0" fill="rgb(236,79,53)" rx="2" ry="2" />
<text  x="1178.86" y="271.5" ></text>
</g>
<g >
<title>all (202,211 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(232,192,27)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (44 samples, 0.02%)</title><rect x="1073.4" y="101" width="0.3" height="15.0" fill="rgb(245,109,41)" rx="2" ry="2" />
<text  x="1076.41" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (76 samples, 0.04%)</title><rect x="1053.7" y="197" width="0.4" height="15.0" fill="rgb(227,189,52)" rx="2" ry="2" />
<text  x="1056.69" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (304 samples, 0.15%)</title><rect x="592.7" y="165" width="1.7" height="15.0" fill="rgb(220,150,44)" rx="2" ry="2" />
<text  x="595.66" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (5,336 samples, 2.64%)</title><rect x="327.6" y="197" width="31.2" height="15.0" fill="rgb(223,155,40)" rx="2" ry="2" />
<text  x="330.63" y="207.5" >st..</text>
</g>
<g >
<title>[unknown] (192 samples, 0.09%)</title><rect x="1071.6" y="117" width="1.1" height="15.0" fill="rgb(205,134,10)" rx="2" ry="2" />
<text  x="1074.62" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::begin (170 samples, 0.08%)</title><rect x="919.9" y="181" width="0.9" height="15.0" fill="rgb(211,113,5)" rx="2" ry="2" />
<text  x="922.86" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back (300 samples, 0.15%)</title><rect x="923.8" y="181" width="1.8" height="15.0" fill="rgb(226,143,53)" rx="2" ry="2" />
<text  x="926.84" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (374 samples, 0.18%)</title><rect x="1165.5" y="197" width="2.1" height="15.0" fill="rgb(210,34,46)" rx="2" ry="2" />
<text  x="1168.45" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (3,496 samples, 1.73%)</title><rect x="1028.5" y="181" width="20.4" height="15.0" fill="rgb(247,143,49)" rx="2" ry="2" />
<text  x="1031.50" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (30 samples, 0.01%)</title><rect x="1172.4" y="165" width="0.2" height="15.0" fill="rgb(232,183,35)" rx="2" ry="2" />
<text  x="1175.41" y="175.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (101 samples, 0.05%)</title><rect x="1020.8" y="197" width="0.6" height="15.0" fill="rgb(245,65,27)" rx="2" ry="2" />
<text  x="1023.76" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (110 samples, 0.05%)</title><rect x="1070.6" y="117" width="0.6" height="15.0" fill="rgb(219,48,51)" rx="2" ry="2" />
<text  x="1073.55" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (40 samples, 0.02%)</title><rect x="1070.0" y="133" width="0.2" height="15.0" fill="rgb(251,126,39)" rx="2" ry="2" />
<text  x="1072.99" y="143.5" ></text>
</g>
<g >
<title>getNodeByIndex (87 samples, 0.04%)</title><rect x="1096.5" y="245" width="0.5" height="15.0" fill="rgb(239,228,22)" rx="2" ry="2" />
<text  x="1099.52" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,222 samples, 0.60%)</title><rect x="1179.1" y="133" width="7.2" height="15.0" fill="rgb(234,25,26)" rx="2" ry="2" />
<text  x="1182.14" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (22 samples, 0.01%)</title><rect x="1166.7" y="149" width="0.1" height="15.0" fill="rgb(221,133,46)" rx="2" ry="2" />
<text  x="1169.68" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;char, std::pair&lt;char const, TrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (18 samples, 0.01%)</title><rect x="21.8" y="117" width="0.1" height="15.0" fill="rgb(231,16,1)" rx="2" ry="2" />
<text  x="24.82" y="127.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, int const&amp;&gt; (136 samples, 0.07%)</title><rect x="491.5" y="133" width="0.8" height="15.0" fill="rgb(226,183,19)" rx="2" ry="2" />
<text  x="494.50" y="143.5" ></text>
</g>
<g >
<title>malloc (912 samples, 0.45%)</title><rect x="1142.5" y="197" width="5.3" height="15.0" fill="rgb(241,121,54)" rx="2" ry="2" />
<text  x="1145.48" y="207.5" ></text>
</g>
<g >
<title>read@plt (32 samples, 0.02%)</title><rect x="1018.1" y="133" width="0.2" height="15.0" fill="rgb(242,110,20)" rx="2" ry="2" />
<text  x="1021.10" y="143.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator() (52 samples, 0.03%)</title><rect x="473.4" y="133" width="0.4" height="15.0" fill="rgb(243,173,45)" rx="2" ry="2" />
<text  x="476.45" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, int&gt; const&amp;&gt; (62 samples, 0.03%)</title><rect x="667.6" y="117" width="0.4" height="15.0" fill="rgb(241,213,32)" rx="2" ry="2" />
<text  x="670.61" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (179 samples, 0.09%)</title><rect x="1024.6" y="181" width="1.1" height="15.0" fill="rgb(231,95,10)" rx="2" ry="2" />
<text  x="1027.63" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (54 samples, 0.03%)</title><rect x="863.9" y="165" width="0.3" height="15.0" fill="rgb(222,188,41)" rx="2" ry="2" />
<text  x="866.92" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (49 samples, 0.02%)</title><rect x="1173.8" y="245" width="0.3" height="15.0" fill="rgb(218,0,34)" rx="2" ry="2" />
<text  x="1176.79" y="255.5" ></text>
</g>
<g >
<title>main (92 samples, 0.05%)</title><rect x="1004.0" y="261" width="0.5" height="15.0" fill="rgb(242,12,22)" rx="2" ry="2" />
<text  x="1006.96" y="271.5" ></text>
</g>
<g >
<title>malloc (138 samples, 0.07%)</title><rect x="1065.8" y="181" width="0.8" height="15.0" fill="rgb(208,52,53)" rx="2" ry="2" />
<text  x="1068.82" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (910 samples, 0.45%)</title><rect x="565.3" y="165" width="5.3" height="15.0" fill="rgb(207,93,50)" rx="2" ry="2" />
<text  x="568.33" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (456 samples, 0.23%)</title><rect x="1084.5" y="229" width="2.7" height="15.0" fill="rgb(214,161,12)" rx="2" ry="2" />
<text  x="1087.51" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (25 samples, 0.01%)</title><rect x="1073.0" y="85" width="0.1" height="15.0" fill="rgb(220,108,35)" rx="2" ry="2" />
<text  x="1075.99" y="95.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (68 samples, 0.03%)</title><rect x="1075.6" y="85" width="0.4" height="15.0" fill="rgb(229,224,13)" rx="2" ry="2" />
<text  x="1078.60" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (119 samples, 0.06%)</title><rect x="1168.9" y="261" width="0.7" height="15.0" fill="rgb(218,60,50)" rx="2" ry="2" />
<text  x="1171.91" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (25 samples, 0.01%)</title><rect x="1173.6" y="245" width="0.1" height="15.0" fill="rgb(227,108,17)" rx="2" ry="2" />
<text  x="1176.60" y="255.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.01%)</title><rect x="21.9" y="117" width="0.2" height="15.0" fill="rgb(234,162,36)" rx="2" ry="2" />
<text  x="24.95" y="127.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.01%)</title><rect x="21.2" y="117" width="0.2" height="15.0" fill="rgb(211,31,23)" rx="2" ry="2" />
<text  x="24.22" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::empty (18 samples, 0.01%)</title><rect x="1173.4" y="245" width="0.1" height="15.0" fill="rgb(213,154,8)" rx="2" ry="2" />
<text  x="1176.42" y="255.5" ></text>
</g>
<g >
<title>strcmp@plt (296 samples, 0.15%)</title><rect x="1060.0" y="149" width="1.8" height="15.0" fill="rgb(242,85,52)" rx="2" ry="2" />
<text  x="1063.03" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::allocate (285 samples, 0.14%)</title><rect x="591.0" y="165" width="1.7" height="15.0" fill="rgb(247,141,14)" rx="2" ry="2" />
<text  x="594.00" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (829 samples, 0.41%)</title><rect x="554.0" y="149" width="4.8" height="15.0" fill="rgb(252,188,4)" rx="2" ry="2" />
<text  x="556.97" y="159.5" ></text>
</g>
<g >
<title>__dynamic_cast (27 samples, 0.01%)</title><rect x="1076.1" y="85" width="0.1" height="15.0" fill="rgb(220,220,11)" rx="2" ry="2" />
<text  x="1079.07" y="95.5" ></text>
</g>
<g >
<title>Feature::Feature (25 samples, 0.01%)</title><rect x="1188.5" y="181" width="0.2" height="15.0" fill="rgb(212,49,39)" rx="2" ry="2" />
<text  x="1191.51" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (27 samples, 0.01%)</title><rect x="1003.3" y="197" width="0.1" height="15.0" fill="rgb(223,174,15)" rx="2" ry="2" />
<text  x="1006.26" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (18 samples, 0.01%)</title><rect x="1187.8" y="133" width="0.1" height="15.0" fill="rgb(254,202,47)" rx="2" ry="2" />
<text  x="1190.78" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (1,369 samples, 0.68%)</title><rect x="84.0" y="149" width="8.0" height="15.0" fill="rgb(236,140,13)" rx="2" ry="2" />
<text  x="87.02" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, int&gt;&amp;&gt; (444 samples, 0.22%)</title><rect x="645.7" y="133" width="2.6" height="15.0" fill="rgb(238,195,53)" rx="2" ry="2" />
<text  x="648.68" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::construct&lt;std::pair&lt;int const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (425 samples, 0.21%)</title><rect x="577.7" y="165" width="2.5" height="15.0" fill="rgb(218,66,35)" rx="2" ry="2" />
<text  x="580.72" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, int&gt;, false, true&gt;::_Node_iterator (18 samples, 0.01%)</title><rect x="1140.7" y="213" width="0.2" height="15.0" fill="rgb(236,151,2)" rx="2" ry="2" />
<text  x="1143.75" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (26 samples, 0.01%)</title><rect x="1067.5" y="181" width="0.2" height="15.0" fill="rgb(217,1,31)" rx="2" ry="2" />
<text  x="1070.54" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; const&amp;&gt; (28 samples, 0.01%)</title><rect x="1167.5" y="181" width="0.1" height="15.0" fill="rgb(222,44,20)" rx="2" ry="2" />
<text  x="1170.47" y="191.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iarchive&lt;boost::archive::binary_iarchive&gt;::load_override (35 samples, 0.02%)</title><rect x="1069.8" y="149" width="0.2" height="15.0" fill="rgb(219,46,45)" rx="2" ry="2" />
<text  x="1072.77" y="159.5" ></text>
</g>
<g >
<title>read@plt (41 samples, 0.02%)</title><rect x="1185.2" y="37" width="0.3" height="15.0" fill="rgb(240,38,31)" rx="2" ry="2" />
<text  x="1188.25" y="47.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::less&lt;int&gt; &gt; (347 samples, 0.17%)</title><rect x="1171.1" y="229" width="2.0" height="15.0" fill="rgb(251,21,12)" rx="2" ry="2" />
<text  x="1174.07" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (57 samples, 0.03%)</title><rect x="1043.7" y="101" width="0.4" height="15.0" fill="rgb(205,51,48)" rx="2" ry="2" />
<text  x="1046.73" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation, std::allocator&lt;OSMRelation&gt; &gt; &gt;::load_object_data (18 samples, 0.01%)</title><rect x="1080.5" y="245" width="0.1" height="15.0" fill="rgb(239,54,33)" rx="2" ry="2" />
<text  x="1083.50" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (155 samples, 0.08%)</title><rect x="1165.7" y="149" width="0.9" height="15.0" fill="rgb(251,176,20)" rx="2" ry="2" />
<text  x="1168.73" y="159.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (31 samples, 0.02%)</title><rect x="1079.4" y="165" width="0.1" height="15.0" fill="rgb(230,186,54)" rx="2" ry="2" />
<text  x="1082.36" y="175.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, long, std::pair&lt;int, int&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (2,871 samples, 1.42%)</title><rect x="928.2" y="181" width="16.8" height="15.0" fill="rgb(232,128,49)" rx="2" ry="2" />
<text  x="931.23" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (451 samples, 0.22%)</title><rect x="1084.5" y="213" width="2.7" height="15.0" fill="rgb(239,129,9)" rx="2" ry="2" />
<text  x="1087.54" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, Feature&gt;::load_object_data (2,062 samples, 1.02%)</title><rect x="1176.3" y="181" width="12.0" height="15.0" fill="rgb(211,171,27)" rx="2" ry="2" />
<text  x="1179.32" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (121 samples, 0.06%)</title><rect x="720.9" y="165" width="0.7" height="15.0" fill="rgb(241,129,23)" rx="2" ry="2" />
<text  x="723.86" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (852 samples, 0.42%)</title><rect x="648.3" y="149" width="5.0" height="15.0" fill="rgb(237,130,1)" rx="2" ry="2" />
<text  x="651.33" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (122 samples, 0.06%)</title><rect x="1168.2" y="261" width="0.7" height="15.0" fill="rgb(251,183,48)" rx="2" ry="2" />
<text  x="1171.19" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (18 samples, 0.01%)</title><rect x="1048.1" y="69" width="0.2" height="15.0" fill="rgb(249,61,37)" rx="2" ry="2" />
<text  x="1051.15" y="79.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (43 samples, 0.02%)</title><rect x="490.5" y="133" width="0.3" height="15.0" fill="rgb(238,57,18)" rx="2" ry="2" />
<text  x="493.50" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (123 samples, 0.06%)</title><rect x="1170.3" y="245" width="0.7" height="15.0" fill="rgb(217,21,25)" rx="2" ry="2" />
<text  x="1173.32" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (132 samples, 0.07%)</title><rect x="1185.5" y="85" width="0.8" height="15.0" fill="rgb(252,18,52)" rx="2" ry="2" />
<text  x="1188.50" y="95.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (5,058 samples, 2.50%)</title><rect x="1022.0" y="213" width="29.6" height="15.0" fill="rgb(235,132,22)" rx="2" ry="2" />
<text  x="1025.04" y="223.5" >bo..</text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;std::less&lt;int&gt; &gt; &gt; (330 samples, 0.16%)</title><rect x="1171.2" y="213" width="1.9" height="15.0" fill="rgb(216,91,45)" rx="2" ry="2" />
<text  x="1174.17" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::front (157 samples, 0.08%)</title><rect x="1000.3" y="197" width="0.9" height="15.0" fill="rgb(232,190,21)" rx="2" ry="2" />
<text  x="1003.27" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (4,290 samples, 2.12%)</title><rect x="1116.1" y="229" width="25.1" height="15.0" fill="rgb(227,6,25)" rx="2" ry="2" />
<text  x="1119.13" y="239.5" >s..</text>
</g>
<g >
<title>__run_exit_handlers (278 samples, 0.14%)</title><rect x="1002.3" y="245" width="1.7" height="15.0" fill="rgb(247,217,25)" rx="2" ry="2" />
<text  x="1005.34" y="255.5" ></text>
</g>
<g >
<title>findStreetSegmentTravelTime (2,737 samples, 1.35%)</title><rect x="51.6" y="197" width="15.9" height="15.0" fill="rgb(235,103,24)" rx="2" ry="2" />
<text  x="54.57" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt;::allocate (88 samples, 0.04%)</title><rect x="677.5" y="165" width="0.5" height="15.0" fill="rgb(233,151,40)" rx="2" ry="2" />
<text  x="680.53" y="175.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (96 samples, 0.05%)</title><rect x="1155.8" y="165" width="0.6" height="15.0" fill="rgb(237,36,17)" rx="2" ry="2" />
<text  x="1158.82" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (37 samples, 0.02%)</title><rect x="21.9" y="133" width="0.3" height="15.0" fill="rgb(225,47,23)" rx="2" ry="2" />
<text  x="24.94" y="143.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (18 samples, 0.01%)</title><rect x="1074.1" y="101" width="0.1" height="15.0" fill="rgb(239,66,21)" rx="2" ry="2" />
<text  x="1077.09" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (81 samples, 0.04%)</title><rect x="668.9" y="165" width="0.5" height="15.0" fill="rgb(209,123,51)" rx="2" ry="2" />
<text  x="671.92" y="175.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (71 samples, 0.04%)</title><rect x="1062.1" y="149" width="0.4" height="15.0" fill="rgb(241,67,38)" rx="2" ry="2" />
<text  x="1065.12" y="159.5" ></text>
</g>
<g >
<title>std::move&lt;std::pair&lt;int, int&gt;&amp;&gt; (329 samples, 0.16%)</title><rect x="840.1" y="133" width="1.9" height="15.0" fill="rgb(206,28,8)" rx="2" ry="2" />
<text  x="843.10" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;int&gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int&gt; (21 samples, 0.01%)</title><rect x="1175.5" y="213" width="0.1" height="15.0" fill="rgb(245,136,11)" rx="2" ry="2" />
<text  x="1178.48" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (35 samples, 0.02%)</title><rect x="1048.5" y="149" width="0.2" height="15.0" fill="rgb(226,80,48)" rx="2" ry="2" />
<text  x="1051.53" y="159.5" ></text>
</g>
<g >
<title>dl_main (53 samples, 0.03%)</title><rect x="1005.8" y="229" width="0.3" height="15.0" fill="rgb(237,84,7)" rx="2" ry="2" />
<text  x="1008.76" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (92 samples, 0.05%)</title><rect x="1004.0" y="197" width="0.5" height="15.0" fill="rgb(249,225,29)" rx="2" ry="2" />
<text  x="1006.96" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (2,201 samples, 1.09%)</title><rect x="1175.9" y="245" width="12.8" height="15.0" fill="rgb(243,155,37)" rx="2" ry="2" />
<text  x="1178.86" y="255.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (45 samples, 0.02%)</title><rect x="1054.4" y="213" width="0.3" height="15.0" fill="rgb(240,218,8)" rx="2" ry="2" />
<text  x="1057.41" y="223.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;&gt;::tuple&lt;void, true&gt; (183 samples, 0.09%)</title><rect x="525.9" y="181" width="1.1" height="15.0" fill="rgb(215,84,0)" rx="2" ry="2" />
<text  x="528.93" y="191.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (86 samples, 0.04%)</title><rect x="1015.7" y="181" width="0.5" height="15.0" fill="rgb(236,78,12)" rx="2" ry="2" />
<text  x="1018.73" y="191.5" ></text>
</g>
<g >
<title>std::move&lt;std::pair&lt;int, int&gt;&amp;&gt; (81 samples, 0.04%)</title><rect x="861.2" y="149" width="0.4" height="15.0" fill="rgb(252,24,12)" rx="2" ry="2" />
<text  x="864.17" y="159.5" ></text>
</g>
<g >
<title>operator new (45 samples, 0.02%)</title><rect x="489.5" y="149" width="0.3" height="15.0" fill="rgb(248,136,25)" rx="2" ry="2" />
<text  x="492.49" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (3,860 samples, 1.91%)</title><rect x="1118.2" y="197" width="22.5" height="15.0" fill="rgb(246,69,30)" rx="2" ry="2" />
<text  x="1121.19" y="207.5" >s..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (80 samples, 0.04%)</title><rect x="1040.2" y="133" width="0.5" height="15.0" fill="rgb(230,92,4)" rx="2" ry="2" />
<text  x="1043.19" y="143.5" ></text>
</g>
<g >
<title>malloc (26 samples, 0.01%)</title><rect x="1080.2" y="197" width="0.1" height="15.0" fill="rgb(237,181,4)" rx="2" ry="2" />
<text  x="1083.16" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,960 samples, 0.97%)</title><rect x="1067.3" y="213" width="11.4" height="15.0" fill="rgb(205,113,18)" rx="2" ry="2" />
<text  x="1070.25" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (62 samples, 0.03%)</title><rect x="1079.2" y="229" width="0.4" height="15.0" fill="rgb(206,100,39)" rx="2" ry="2" />
<text  x="1082.21" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (4,206 samples, 2.08%)</title><rect x="1054.3" y="245" width="24.5" height="15.0" fill="rgb(252,42,0)" rx="2" ry="2" />
<text  x="1057.29" y="255.5" >b..</text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (41 samples, 0.02%)</title><rect x="1054.7" y="213" width="0.2" height="15.0" fill="rgb(215,91,3)" rx="2" ry="2" />
<text  x="1057.67" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, int&gt;, true&gt; &gt; &gt;::allocate (86 samples, 0.04%)</title><rect x="1149.4" y="213" width="0.5" height="15.0" fill="rgb(218,102,18)" rx="2" ry="2" />
<text  x="1152.40" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;, std::pair&lt;int, int&gt;*&gt; (33 samples, 0.02%)</title><rect x="1157.6" y="229" width="0.2" height="15.0" fill="rgb(214,229,14)" rx="2" ry="2" />
<text  x="1160.64" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (37 samples, 0.02%)</title><rect x="1170.8" y="229" width="0.2" height="15.0" fill="rgb(225,46,9)" rx="2" ry="2" />
<text  x="1173.80" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (30 samples, 0.01%)</title><rect x="553.8" y="149" width="0.2" height="15.0" fill="rgb(251,118,18)" rx="2" ry="2" />
<text  x="556.79" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator+ (1,227 samples, 0.61%)</title><rect x="825.7" y="117" width="7.1" height="15.0" fill="rgb(220,216,19)" rx="2" ry="2" />
<text  x="828.67" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, int&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (608 samples, 0.30%)</title><rect x="709.2" y="165" width="3.6" height="15.0" fill="rgb(250,25,14)" rx="2" ry="2" />
<text  x="712.21" y="175.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (195 samples, 0.10%)</title><rect x="21.1" y="245" width="1.1" height="15.0" fill="rgb(252,91,6)" rx="2" ry="2" />
<text  x="24.08" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;OSMID, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (29 samples, 0.01%)</title><rect x="1091.5" y="213" width="0.2" height="15.0" fill="rgb(211,125,30)" rx="2" ry="2" />
<text  x="1094.50" y="223.5" ></text>
</g>
<g >
<title>strcmp@plt (48 samples, 0.02%)</title><rect x="1068.7" y="133" width="0.3" height="15.0" fill="rgb(244,190,19)" rx="2" ry="2" />
<text  x="1071.73" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (27 samples, 0.01%)</title><rect x="1173.3" y="245" width="0.1" height="15.0" fill="rgb(230,78,19)" rx="2" ry="2" />
<text  x="1176.26" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (24 samples, 0.01%)</title><rect x="1173.8" y="229" width="0.2" height="15.0" fill="rgb(236,176,5)" rx="2" ry="2" />
<text  x="1176.82" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,125 samples, 0.56%)</title><rect x="1070.2" y="149" width="6.6" height="15.0" fill="rgb(207,2,41)" rx="2" ry="2" />
<text  x="1073.24" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (144 samples, 0.07%)</title><rect x="1018.3" y="181" width="0.8" height="15.0" fill="rgb(233,199,18)" rx="2" ry="2" />
<text  x="1021.31" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (34 samples, 0.02%)</title><rect x="1076.2" y="85" width="0.2" height="15.0" fill="rgb(244,117,26)" rx="2" ry="2" />
<text  x="1079.23" y="95.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt; (25 samples, 0.01%)</title><rect x="1003.8" y="213" width="0.2" height="15.0" fill="rgb(207,100,14)" rx="2" ry="2" />
<text  x="1006.82" y="223.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (32 samples, 0.02%)</title><rect x="1074.2" y="117" width="0.2" height="15.0" fill="rgb(237,55,24)" rx="2" ry="2" />
<text  x="1077.19" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::operator[] (1,744 samples, 0.86%)</title><rect x="968.6" y="197" width="10.2" height="15.0" fill="rgb(208,121,16)" rx="2" ry="2" />
<text  x="971.64" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (55 samples, 0.03%)</title><rect x="1014.9" y="197" width="0.3" height="15.0" fill="rgb(250,207,18)" rx="2" ry="2" />
<text  x="1017.91" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt; (2,724 samples, 1.35%)</title><rect x="802.5" y="133" width="15.9" height="15.0" fill="rgb(225,48,29)" rx="2" ry="2" />
<text  x="805.46" y="143.5" ></text>
</g>
<g >
<title>_dl_start (54 samples, 0.03%)</title><rect x="1005.8" y="261" width="0.3" height="15.0" fill="rgb(252,161,16)" rx="2" ry="2" />
<text  x="1008.75" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int const&amp;&gt;::_M_head (51 samples, 0.03%)</title><rect x="577.8" y="133" width="0.3" height="15.0" fill="rgb(246,129,26)" rx="2" ry="2" />
<text  x="580.82" y="143.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (1,817 samples, 0.90%)</title><rect x="237.9" y="181" width="10.6" height="15.0" fill="rgb(250,207,12)" rx="2" ry="2" />
<text  x="240.89" y="191.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (43 samples, 0.02%)</title><rect x="1070.0" y="149" width="0.2" height="15.0" fill="rgb(227,179,20)" rx="2" ry="2" />
<text  x="1072.98" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_valptr (83 samples, 0.04%)</title><rect x="704.9" y="165" width="0.5" height="15.0" fill="rgb(254,170,40)" rx="2" ry="2" />
<text  x="707.91" y="175.5" ></text>
</g>
<g >
<title>strcmp@plt (38 samples, 0.02%)</title><rect x="1055.2" y="181" width="0.3" height="15.0" fill="rgb(228,216,51)" rx="2" ry="2" />
<text  x="1058.25" y="191.5" ></text>
</g>
<g >
<title>strcmp@plt (432 samples, 0.21%)</title><rect x="1033.5" y="133" width="2.5" height="15.0" fill="rgb(219,35,9)" rx="2" ry="2" />
<text  x="1036.53" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (27 samples, 0.01%)</title><rect x="130.3" y="133" width="0.1" height="15.0" fill="rgb(223,224,14)" rx="2" ry="2" />
<text  x="133.27" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt;::construct&lt;std::pair&lt;int const, int&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (880 samples, 0.44%)</title><rect x="678.0" y="165" width="5.2" height="15.0" fill="rgb(223,93,32)" rx="2" ry="2" />
<text  x="681.04" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (342 samples, 0.17%)</title><rect x="1184.3" y="101" width="2.0" height="15.0" fill="rgb(233,120,48)" rx="2" ry="2" />
<text  x="1187.28" y="111.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, bool&gt; const&amp;&gt; (80 samples, 0.04%)</title><rect x="473.0" y="117" width="0.4" height="15.0" fill="rgb(212,2,4)" rx="2" ry="2" />
<text  x="475.98" y="127.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (229 samples, 0.11%)</title><rect x="1155.8" y="261" width="1.3" height="15.0" fill="rgb(244,198,27)" rx="2" ry="2" />
<text  x="1158.77" y="271.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, int&gt;, false, true&gt;, bool&gt; (249 samples, 0.12%)</title><rect x="1151.3" y="229" width="1.5" height="15.0" fill="rgb(243,161,39)" rx="2" ry="2" />
<text  x="1154.30" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (103 samples, 0.05%)</title><rect x="1184.9" y="85" width="0.6" height="15.0" fill="rgb(233,193,2)" rx="2" ry="2" />
<text  x="1187.90" y="95.5" ></text>
</g>
<g >
<title>malloc (24 samples, 0.01%)</title><rect x="1167.2" y="149" width="0.2" height="15.0" fill="rgb(230,140,21)" rx="2" ry="2" />
<text  x="1170.24" y="159.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;::operator* (37 samples, 0.02%)</title><rect x="861.6" y="149" width="0.3" height="15.0" fill="rgb(236,194,12)" rx="2" ry="2" />
<text  x="864.64" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (39 samples, 0.02%)</title><rect x="920.6" y="165" width="0.2" height="15.0" fill="rgb(219,11,27)" rx="2" ry="2" />
<text  x="923.62" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (29 samples, 0.01%)</title><rect x="571.0" y="165" width="0.1" height="15.0" fill="rgb(245,64,14)" rx="2" ry="2" />
<text  x="573.96" y="175.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (68 samples, 0.03%)</title><rect x="1075.6" y="101" width="0.4" height="15.0" fill="rgb(250,49,15)" rx="2" ry="2" />
<text  x="1078.60" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (67 samples, 0.03%)</title><rect x="662.7" y="149" width="0.4" height="15.0" fill="rgb(220,4,29)" rx="2" ry="2" />
<text  x="665.66" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt; &gt;::allocate (479 samples, 0.24%)</title><rect x="517.3" y="165" width="2.8" height="15.0" fill="rgb(219,91,5)" rx="2" ry="2" />
<text  x="520.30" y="175.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt; (63 samples, 0.03%)</title><rect x="1003.4" y="213" width="0.4" height="15.0" fill="rgb(211,100,34)" rx="2" ry="2" />
<text  x="1006.44" y="223.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt;::pop (360 samples, 0.18%)</title><rect x="1171.1" y="245" width="2.1" height="15.0" fill="rgb(211,167,40)" rx="2" ry="2" />
<text  x="1174.05" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, int&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;OSMID, int&gt; &gt; (1,578 samples, 0.78%)</title><rect x="1141.7" y="229" width="9.2" height="15.0" fill="rgb(214,86,25)" rx="2" ry="2" />
<text  x="1144.67" y="239.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (133 samples, 0.07%)</title><rect x="1155.8" y="181" width="0.8" height="15.0" fill="rgb(224,172,49)" rx="2" ry="2" />
<text  x="1158.81" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (5,727 samples, 2.83%)</title><rect x="1019.1" y="229" width="33.5" height="15.0" fill="rgb(220,38,16)" rx="2" ry="2" />
<text  x="1022.15" y="239.5" >bo..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (120 samples, 0.06%)</title><rect x="1177.9" y="149" width="0.7" height="15.0" fill="rgb(233,68,44)" rx="2" ry="2" />
<text  x="1180.85" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::begin (157 samples, 0.08%)</title><rect x="1000.3" y="181" width="0.9" height="15.0" fill="rgb(251,198,11)" rx="2" ry="2" />
<text  x="1003.27" y="191.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (2,202 samples, 1.09%)</title><rect x="1175.9" y="277" width="12.8" height="15.0" fill="rgb(221,19,12)" rx="2" ry="2" />
<text  x="1178.86" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt; (8,716 samples, 4.31%)</title><rect x="869.0" y="181" width="50.9" height="15.0" fill="rgb(229,18,3)" rx="2" ry="2" />
<text  x="872.00" y="191.5" >std::..</text>
</g>
<g >
<title>[unknown] (827 samples, 0.41%)</title><rect x="1010.4" y="213" width="4.8" height="15.0" fill="rgb(231,151,31)" rx="2" ry="2" />
<text  x="1013.40" y="223.5" ></text>
</g>
<g >
<title>strcmp@plt (21 samples, 0.01%)</title><rect x="1176.2" y="149" width="0.1" height="15.0" fill="rgb(231,14,33)" rx="2" ry="2" />
<text  x="1179.19" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (96 samples, 0.05%)</title><rect x="1038.1" y="133" width="0.5" height="15.0" fill="rgb(213,28,37)" rx="2" ry="2" />
<text  x="1041.08" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,884 samples, 0.93%)</title><rect x="1176.9" y="165" width="11.0" height="15.0" fill="rgb(249,52,27)" rx="2" ry="2" />
<text  x="1179.94" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash@plt (96 samples, 0.05%)</title><rect x="571.6" y="165" width="0.5" height="15.0" fill="rgb(224,211,8)" rx="2" ry="2" />
<text  x="574.57" y="175.5" ></text>
</g>
<g >
<title>[unknown] (40 samples, 0.02%)</title><rect x="1178.0" y="117" width="0.2" height="15.0" fill="rgb(232,109,6)" rx="2" ry="2" />
<text  x="1181.00" y="127.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator() (53 samples, 0.03%)</title><rect x="668.0" y="133" width="0.3" height="15.0" fill="rgb(214,33,41)" rx="2" ry="2" />
<text  x="670.97" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (74 samples, 0.04%)</title><rect x="1086.7" y="197" width="0.5" height="15.0" fill="rgb(215,47,53)" rx="2" ry="2" />
<text  x="1089.74" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, int&gt;, false, false&gt;::_Node_iterator (153 samples, 0.08%)</title><rect x="669.4" y="165" width="0.9" height="15.0" fill="rgb(216,189,12)" rx="2" ry="2" />
<text  x="672.39" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (212 samples, 0.10%)</title><rect x="1079.2" y="261" width="1.2" height="15.0" fill="rgb(232,61,22)" rx="2" ry="2" />
<text  x="1082.20" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,354 samples, 0.67%)</title><rect x="1056.7" y="197" width="7.9" height="15.0" fill="rgb(214,223,51)" rx="2" ry="2" />
<text  x="1059.74" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, double&gt;::pair&lt;int const&amp;, 0ul&gt; (101 samples, 0.05%)</title><rect x="578.3" y="149" width="0.6" height="15.0" fill="rgb(253,56,34)" rx="2" ry="2" />
<text  x="581.31" y="159.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;int*&gt;, int*&gt; (29 samples, 0.01%)</title><rect x="1160.1" y="229" width="0.1" height="15.0" fill="rgb(254,95,1)" rx="2" ry="2" />
<text  x="1163.05" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, double&gt; const&amp;&gt; (125 samples, 0.06%)</title><rect x="569.8" y="133" width="0.7" height="15.0" fill="rgb(216,55,29)" rx="2" ry="2" />
<text  x="572.79" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (117 samples, 0.06%)</title><rect x="1166.0" y="133" width="0.6" height="15.0" fill="rgb(233,17,21)" rx="2" ry="2" />
<text  x="1168.95" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (35 samples, 0.02%)</title><rect x="1047.8" y="85" width="0.2" height="15.0" fill="rgb(234,194,16)" rx="2" ry="2" />
<text  x="1050.83" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt;::_Hash_node (60 samples, 0.03%)</title><rect x="516.2" y="165" width="0.3" height="15.0" fill="rgb(253,97,45)" rx="2" ry="2" />
<text  x="519.20" y="175.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.01%)</title><rect x="1004.2" y="101" width="0.1" height="15.0" fill="rgb(245,136,51)" rx="2" ry="2" />
<text  x="1007.19" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (295 samples, 0.15%)</title><rect x="671.4" y="181" width="1.7" height="15.0" fill="rgb(248,182,31)" rx="2" ry="2" />
<text  x="674.35" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (1,318 samples, 0.65%)</title><rect x="43.9" y="197" width="7.7" height="15.0" fill="rgb(237,79,1)" rx="2" ry="2" />
<text  x="46.88" y="207.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;OSMID, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;OSMID&gt;, std::equal_to&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert&lt;std::pair&lt;OSMID, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (20 samples, 0.01%)</title><rect x="1093.2" y="245" width="0.1" height="15.0" fill="rgb(213,134,36)" rx="2" ry="2" />
<text  x="1096.21" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, bool&gt;, false, false&gt;::operator-&gt; (348 samples, 0.17%)</title><rect x="523.9" y="181" width="2.0" height="15.0" fill="rgb(222,110,1)" rx="2" ry="2" />
<text  x="526.90" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator+ (944 samples, 0.47%)</title><rect x="933.4" y="165" width="5.5" height="15.0" fill="rgb(212,95,2)" rx="2" ry="2" />
<text  x="936.41" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (109 samples, 0.05%)</title><rect x="668.3" y="149" width="0.6" height="15.0" fill="rgb(224,79,38)" rx="2" ry="2" />
<text  x="671.28" y="159.5" ></text>
</g>
<g >
<title>operator new (109 samples, 0.05%)</title><rect x="1187.1" y="133" width="0.7" height="15.0" fill="rgb(239,89,32)" rx="2" ry="2" />
<text  x="1190.12" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (35 samples, 0.02%)</title><rect x="1046.2" y="101" width="0.2" height="15.0" fill="rgb(226,114,50)" rx="2" ry="2" />
<text  x="1049.23" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3,140 samples, 1.55%)</title><rect x="1097.8" y="213" width="18.3" height="15.0" fill="rgb(212,52,48)" rx="2" ry="2" />
<text  x="1100.81" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (309 samples, 0.15%)</title><rect x="572.1" y="181" width="1.8" height="15.0" fill="rgb(254,107,22)" rx="2" ry="2" />
<text  x="575.13" y="191.5" ></text>
</g>
<g >
<title>checkOpen (79 samples, 0.04%)</title><rect x="276.3" y="165" width="0.5" height="15.0" fill="rgb(221,47,0)" rx="2" ry="2" />
<text  x="279.30" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (74 samples, 0.04%)</title><rect x="1072.3" y="101" width="0.4" height="15.0" fill="rgb(222,37,46)" rx="2" ry="2" />
<text  x="1075.30" y="111.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (80 samples, 0.04%)</title><rect x="1064.2" y="149" width="0.4" height="15.0" fill="rgb(217,94,24)" rx="2" ry="2" />
<text  x="1067.18" y="159.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::operator[] (2,076 samples, 1.03%)</title><rect x="978.8" y="197" width="12.1" height="15.0" fill="rgb(209,143,9)" rx="2" ry="2" />
<text  x="981.82" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (2,200 samples, 1.09%)</title><rect x="683.3" y="133" width="12.8" height="15.0" fill="rgb(232,34,52)" rx="2" ry="2" />
<text  x="686.29" y="143.5" ></text>
</g>
<g >
<title>malloc (2,428 samples, 1.20%)</title><rect x="495.1" y="149" width="14.2" height="15.0" fill="rgb(223,45,42)" rx="2" ry="2" />
<text  x="498.11" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (48 samples, 0.02%)</title><rect x="1068.7" y="149" width="0.3" height="15.0" fill="rgb(223,190,50)" rx="2" ry="2" />
<text  x="1071.73" y="159.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (39 samples, 0.02%)</title><rect x="1056.5" y="197" width="0.2" height="15.0" fill="rgb(251,75,10)" rx="2" ry="2" />
<text  x="1059.48" y="207.5" ></text>
</g>
<g >
<title>std::__make_move_if_noexcept_iterator&lt;int, std::move_iterator&lt;int*&gt; &gt; (29 samples, 0.01%)</title><rect x="1159.6" y="213" width="0.2" height="15.0" fill="rgb(208,198,7)" rx="2" ry="2" />
<text  x="1162.61" y="223.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, long, std::pair&lt;int, int&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (3,726 samples, 1.84%)</title><rect x="818.4" y="133" width="21.7" height="15.0" fill="rgb(246,110,51)" rx="2" ry="2" />
<text  x="821.36" y="143.5" >s..</text>
</g>
<g >
<title>[unknown] (106 samples, 0.05%)</title><rect x="1054.3" y="229" width="0.6" height="15.0" fill="rgb(246,67,26)" rx="2" ry="2" />
<text  x="1057.29" y="239.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (44 samples, 0.02%)</title><rect x="523.5" y="149" width="0.2" height="15.0" fill="rgb(210,98,44)" rx="2" ry="2" />
<text  x="526.49" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (1,493 samples, 0.74%)</title><rect x="83.7" y="165" width="8.7" height="15.0" fill="rgb(219,169,25)" rx="2" ry="2" />
<text  x="86.70" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (334 samples, 0.17%)</title><rect x="1011.6" y="197" width="2.0" height="15.0" fill="rgb(226,54,49)" rx="2" ry="2" />
<text  x="1014.61" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;*&gt; (26 samples, 0.01%)</title><rect x="1169.9" y="245" width="0.2" height="15.0" fill="rgb(225,106,47)" rx="2" ry="2" />
<text  x="1172.95" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (52 samples, 0.03%)</title><rect x="135.1" y="165" width="0.3" height="15.0" fill="rgb(254,52,8)" rx="2" ry="2" />
<text  x="138.14" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt; &gt; &gt; (212 samples, 0.10%)</title><rect x="1079.2" y="245" width="1.2" height="15.0" fill="rgb(219,83,11)" rx="2" ry="2" />
<text  x="1082.20" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator+ (71 samples, 0.04%)</title><rect x="1175.1" y="213" width="0.4" height="15.0" fill="rgb(238,154,41)" rx="2" ry="2" />
<text  x="1178.07" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (37 samples, 0.02%)</title><rect x="864.8" y="165" width="0.2" height="15.0" fill="rgb(221,15,43)" rx="2" ry="2" />
<text  x="867.78" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (71 samples, 0.04%)</title><rect x="1062.1" y="165" width="0.4" height="15.0" fill="rgb(211,204,13)" rx="2" ry="2" />
<text  x="1065.12" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,176 samples, 0.58%)</title><rect x="1106.3" y="197" width="6.9" height="15.0" fill="rgb(221,62,18)" rx="2" ry="2" />
<text  x="1109.30" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator+ (7,675 samples, 3.80%)</title><rect x="757.7" y="133" width="44.8" height="15.0" fill="rgb(219,226,34)" rx="2" ry="2" />
<text  x="760.67" y="143.5" >__gn..</text>
</g>
<g >
<title>operator new (151 samples, 0.07%)</title><rect x="1090.5" y="213" width="0.9" height="15.0" fill="rgb(227,30,47)" rx="2" ry="2" />
<text  x="1093.54" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (84 samples, 0.04%)</title><rect x="1078.1" y="149" width="0.5" height="15.0" fill="rgb(213,105,28)" rx="2" ry="2" />
<text  x="1081.08" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (199 samples, 0.10%)</title><rect x="1047.2" y="117" width="1.1" height="15.0" fill="rgb(223,139,13)" rx="2" ry="2" />
<text  x="1050.16" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::priority_queue&lt;int, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (52 samples, 0.03%)</title><rect x="1170.5" y="213" width="0.3" height="15.0" fill="rgb(220,144,50)" rx="2" ry="2" />
<text  x="1173.47" y="223.5" ></text>
</g>
<g >
<title>read@plt (20 samples, 0.01%)</title><rect x="1042.3" y="53" width="0.1" height="15.0" fill="rgb(221,209,13)" rx="2" ry="2" />
<text  x="1045.32" y="63.5" ></text>
</g>
<g >
<title>[unknown] (236 samples, 0.12%)</title><rect x="1070.2" y="133" width="1.4" height="15.0" fill="rgb(208,102,48)" rx="2" ry="2" />
<text  x="1073.24" y="143.5" ></text>
</g>
<g >
<title>memcpy@plt (34 samples, 0.02%)</title><rect x="1063.6" y="133" width="0.2" height="15.0" fill="rgb(238,144,25)" rx="2" ry="2" />
<text  x="1066.65" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (35 samples, 0.02%)</title><rect x="1018.1" y="165" width="0.2" height="15.0" fill="rgb(212,229,27)" rx="2" ry="2" />
<text  x="1021.10" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, double&gt; &gt;::_M_v (102 samples, 0.05%)</title><rect x="569.2" y="133" width="0.6" height="15.0" fill="rgb(217,35,43)" rx="2" ry="2" />
<text  x="572.20" y="143.5" ></text>
</g>
<g >
<title>operator new (3,673 samples, 1.82%)</title><rect x="683.2" y="165" width="21.4" height="15.0" fill="rgb(228,138,32)" rx="2" ry="2" />
<text  x="686.18" y="175.5" >o..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, double&gt; &gt;::_M_v (382 samples, 0.19%)</title><rect x="573.9" y="181" width="2.3" height="15.0" fill="rgb(207,19,15)" rx="2" ry="2" />
<text  x="576.93" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (2,044 samples, 1.01%)</title><rect x="1066.9" y="229" width="11.9" height="15.0" fill="rgb(243,141,49)" rx="2" ry="2" />
<text  x="1069.91" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMDatabase&gt;::load_object_data (224 samples, 0.11%)</title><rect x="1163.7" y="229" width="1.3" height="15.0" fill="rgb(221,124,19)" rx="2" ry="2" />
<text  x="1166.73" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (55 samples, 0.03%)</title><rect x="570.6" y="165" width="0.4" height="15.0" fill="rgb(210,67,17)" rx="2" ry="2" />
<text  x="573.64" y="175.5" ></text>
</g>
<g >
<title>memset@plt (283 samples, 0.14%)</title><rect x="282.3" y="181" width="1.6" height="15.0" fill="rgb(252,91,22)" rx="2" ry="2" />
<text  x="285.27" y="191.5" ></text>
</g>
<g >
<title>[unknown] (103 samples, 0.05%)</title><rect x="1054.9" y="213" width="0.6" height="15.0" fill="rgb(234,106,41)" rx="2" ry="2" />
<text  x="1057.91" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (38 samples, 0.02%)</title><rect x="1168.6" y="245" width="0.2" height="15.0" fill="rgb(216,40,7)" rx="2" ry="2" />
<text  x="1171.58" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (19 samples, 0.01%)</title><rect x="1077.3" y="133" width="0.1" height="15.0" fill="rgb(222,102,28)" rx="2" ry="2" />
<text  x="1080.31" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash@plt (49 samples, 0.02%)</title><rect x="1140.9" y="213" width="0.2" height="15.0" fill="rgb(224,131,25)" rx="2" ry="2" />
<text  x="1143.85" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;OSMID const, int&gt;&amp;&gt; (50 samples, 0.02%)</title><rect x="1150.9" y="229" width="0.3" height="15.0" fill="rgb(210,29,42)" rx="2" ry="2" />
<text  x="1153.88" y="239.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (104 samples, 0.05%)</title><rect x="1027.9" y="181" width="0.6" height="15.0" fill="rgb(233,37,50)" rx="2" ry="2" />
<text  x="1030.89" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (444 samples, 0.22%)</title><rect x="665.7" y="149" width="2.6" height="15.0" fill="rgb(223,0,5)" rx="2" ry="2" />
<text  x="668.69" y="159.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (444 samples, 0.22%)</title><rect x="1165.0" y="261" width="2.6" height="15.0" fill="rgb(226,165,33)" rx="2" ry="2" />
<text  x="1168.04" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (71 samples, 0.04%)</title><rect x="1042.4" y="101" width="0.5" height="15.0" fill="rgb(237,42,50)" rx="2" ry="2" />
<text  x="1045.44" y="111.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (87 samples, 0.04%)</title><rect x="1043.6" y="117" width="0.5" height="15.0" fill="rgb(212,229,22)" rx="2" ry="2" />
<text  x="1046.56" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash@plt (28 samples, 0.01%)</title><rect x="20.9" y="261" width="0.2" height="15.0" fill="rgb(205,151,22)" rx="2" ry="2" />
<text  x="23.90" y="271.5" ></text>
</g>
<g >
<title>OSMway::OSMway_insert (2,144 samples, 1.06%)</title><rect x="1080.8" y="261" width="12.5" height="15.0" fill="rgb(232,91,51)" rx="2" ry="2" />
<text  x="1083.81" y="271.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (243 samples, 0.12%)</title><rect x="129.2" y="165" width="1.4" height="15.0" fill="rgb(253,37,3)" rx="2" ry="2" />
<text  x="132.18" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (240 samples, 0.12%)</title><rect x="725.9" y="165" width="1.4" height="15.0" fill="rgb(251,58,36)" rx="2" ry="2" />
<text  x="728.94" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (38 samples, 0.02%)</title><rect x="1055.2" y="197" width="0.3" height="15.0" fill="rgb(231,12,3)" rx="2" ry="2" />
<text  x="1058.25" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (239 samples, 0.12%)</title><rect x="1009.0" y="213" width="1.4" height="15.0" fill="rgb(231,95,43)" rx="2" ry="2" />
<text  x="1012.01" y="223.5" ></text>
</g>
<g >
<title>strcmp@plt (74 samples, 0.04%)</title><rect x="1072.3" y="85" width="0.4" height="15.0" fill="rgb(205,45,12)" rx="2" ry="2" />
<text  x="1075.30" y="95.5" ></text>
</g>
<g >
<title>std::make_pair&lt;OSMID&amp;, int&amp;&gt; (203 samples, 0.10%)</title><rect x="1152.9" y="245" width="1.2" height="15.0" fill="rgb(249,172,3)" rx="2" ry="2" />
<text  x="1155.89" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, unsigned long, false&gt;::_S_equals (844 samples, 0.42%)</title><rect x="643.3" y="149" width="5.0" height="15.0" fill="rgb(208,175,44)" rx="2" ry="2" />
<text  x="646.34" y="159.5" ></text>
</g>
<g >
<title>findPathBetweenIntersections (167,711 samples, 82.94%)</title><rect x="22.5" y="213" width="978.7" height="15.0" fill="rgb(206,212,23)" rx="2" ry="2" />
<text  x="25.51" y="223.5" >findPathBetweenIntersections</text>
</g>
<g >
<title>TrieNode::tt_insert (97 samples, 0.05%)</title><rect x="21.1" y="133" width="0.6" height="15.0" fill="rgb(210,55,9)" rx="2" ry="2" />
<text  x="24.12" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::max_size (18 samples, 0.01%)</title><rect x="85.1" y="117" width="0.1" height="15.0" fill="rgb(246,176,4)" rx="2" ry="2" />
<text  x="88.09" y="127.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (23 samples, 0.01%)</title><rect x="1075.8" y="69" width="0.1" height="15.0" fill="rgb(250,116,38)" rx="2" ry="2" />
<text  x="1078.76" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (72 samples, 0.04%)</title><rect x="567.4" y="149" width="0.5" height="15.0" fill="rgb(232,27,23)" rx="2" ry="2" />
<text  x="570.44" y="159.5" ></text>
</g>
<g >
<title>[unknown] (667 samples, 0.33%)</title><rect x="1179.1" y="117" width="3.9" height="15.0" fill="rgb(219,167,46)" rx="2" ry="2" />
<text  x="1182.14" y="127.5" ></text>
</g>
<g >
<title>getNumberOfNodes (67 samples, 0.03%)</title><rect x="1162.0" y="261" width="0.4" height="15.0" fill="rgb(241,174,2)" rx="2" ry="2" />
<text  x="1165.02" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20 samples, 0.01%)</title><rect x="1169.4" y="213" width="0.1" height="15.0" fill="rgb(252,62,11)" rx="2" ry="2" />
<text  x="1172.38" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMRelation::Member&gt;::load_object_data (48 samples, 0.02%)</title><rect x="1053.9" y="181" width="0.2" height="15.0" fill="rgb(226,86,15)" rx="2" ry="2" />
<text  x="1056.85" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;OSMID const, int&gt; &gt;::_M_v (40 samples, 0.02%)</title><rect x="1141.4" y="229" width="0.3" height="15.0" fill="rgb(228,60,40)" rx="2" ry="2" />
<text  x="1144.44" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (48 samples, 0.02%)</title><rect x="1092.7" y="229" width="0.3" height="15.0" fill="rgb(210,29,54)" rx="2" ry="2" />
<text  x="1095.70" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_M_swap_data (67 samples, 0.03%)</title><rect x="1167.7" y="229" width="0.4" height="15.0" fill="rgb(212,215,23)" rx="2" ry="2" />
<text  x="1170.72" y="239.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (30 samples, 0.01%)</title><rect x="1178.9" y="133" width="0.2" height="15.0" fill="rgb(247,157,31)" rx="2" ry="2" />
<text  x="1181.94" y="143.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (56 samples, 0.03%)</title><rect x="1043.7" y="85" width="0.4" height="15.0" fill="rgb(233,90,7)" rx="2" ry="2" />
<text  x="1046.74" y="95.5" ></text>
</g>
<g >
<title>_int_malloc (26 samples, 0.01%)</title><rect x="1080.2" y="181" width="0.1" height="15.0" fill="rgb(248,47,26)" rx="2" ry="2" />
<text  x="1083.16" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (31 samples, 0.02%)</title><rect x="1001.0" y="165" width="0.2" height="15.0" fill="rgb(214,54,44)" rx="2" ry="2" />
<text  x="1004.01" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1,576 samples, 0.78%)</title><rect x="562.9" y="181" width="9.2" height="15.0" fill="rgb(243,193,9)" rx="2" ry="2" />
<text  x="565.93" y="191.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (99 samples, 0.05%)</title><rect x="1036.4" y="133" width="0.5" height="15.0" fill="rgb(246,187,18)" rx="2" ry="2" />
<text  x="1039.36" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;LatLon&amp;&gt; (125 samples, 0.06%)</title><rect x="279.4" y="165" width="0.7" height="15.0" fill="rgb(244,3,24)" rx="2" ry="2" />
<text  x="282.36" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (28,830 samples, 14.26%)</title><rect x="358.8" y="197" width="168.2" height="15.0" fill="rgb(252,84,41)" rx="2" ry="2" />
<text  x="361.76" y="207.5" >std::__detail::_Map_b..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int const&amp;&gt;::_Tuple_impl (66 samples, 0.03%)</title><rect x="577.8" y="149" width="0.4" height="15.0" fill="rgb(237,216,49)" rx="2" ry="2" />
<text  x="580.82" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int, int&gt; &gt; (33 samples, 0.02%)</title><rect x="922.5" y="149" width="0.2" height="15.0" fill="rgb(217,142,45)" rx="2" ry="2" />
<text  x="925.54" y="159.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (22 samples, 0.01%)</title><rect x="1169.2" y="213" width="0.2" height="15.0" fill="rgb(246,121,38)" rx="2" ry="2" />
<text  x="1172.25" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (202 samples, 0.10%)</title><rect x="1064.6" y="197" width="1.2" height="15.0" fill="rgb(241,160,35)" rx="2" ry="2" />
<text  x="1067.64" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (262 samples, 0.13%)</title><rect x="1063.1" y="165" width="1.5" height="15.0" fill="rgb(237,191,13)" rx="2" ry="2" />
<text  x="1066.11" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;OSMID, int&gt;::pair&lt;OSMID&amp;, int&amp;, true&gt; (100 samples, 0.05%)</title><rect x="1153.5" y="229" width="0.6" height="15.0" fill="rgb(228,138,19)" rx="2" ry="2" />
<text  x="1156.49" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, double&gt;&amp;&gt; (457 samples, 0.23%)</title><rect x="556.1" y="133" width="2.7" height="15.0" fill="rgb(217,195,13)" rx="2" ry="2" />
<text  x="559.14" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (4,380 samples, 2.17%)</title><rect x="1026.0" y="197" width="25.6" height="15.0" fill="rgb(226,122,44)" rx="2" ry="2" />
<text  x="1029.00" y="207.5" >b..</text>
</g>
<g >
<title>malloc@plt (1,186 samples, 0.59%)</title><rect x="509.3" y="149" width="6.9" height="15.0" fill="rgb(239,67,4)" rx="2" ry="2" />
<text  x="512.28" y="159.5" ></text>
</g>
<g >
<title>operator new (50 samples, 0.02%)</title><rect x="678.0" y="149" width="0.3" height="15.0" fill="rgb(206,156,13)" rx="2" ry="2" />
<text  x="681.04" y="159.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iarchive&lt;boost::archive::binary_iarchive&gt;::load_override (37 samples, 0.02%)</title><rect x="1056.3" y="197" width="0.2" height="15.0" fill="rgb(252,153,47)" rx="2" ry="2" />
<text  x="1059.26" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (99 samples, 0.05%)</title><rect x="1036.4" y="149" width="0.5" height="15.0" fill="rgb(208,182,0)" rx="2" ry="2" />
<text  x="1039.36" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (3,139 samples, 1.55%)</title><rect x="440.6" y="149" width="18.3" height="15.0" fill="rgb(246,207,37)" rx="2" ry="2" />
<text  x="443.63" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (4,902 samples, 2.42%)</title><rect x="283.9" y="181" width="28.6" height="15.0" fill="rgb(240,162,49)" rx="2" ry="2" />
<text  x="286.92" y="191.5" >st..</text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (270 samples, 0.13%)</title><rect x="1180.0" y="101" width="1.6" height="15.0" fill="rgb(220,160,5)" rx="2" ry="2" />
<text  x="1183.03" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (315 samples, 0.16%)</title><rect x="1158.6" y="245" width="1.8" height="15.0" fill="rgb(239,130,40)" rx="2" ry="2" />
<text  x="1161.57" y="255.5" ></text>
</g>
<g >
<title>malloc (84 samples, 0.04%)</title><rect x="1078.1" y="165" width="0.5" height="15.0" fill="rgb(212,18,1)" rx="2" ry="2" />
<text  x="1081.08" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (54 samples, 0.03%)</title><rect x="718.5" y="181" width="0.3" height="15.0" fill="rgb(228,105,31)" rx="2" ry="2" />
<text  x="721.46" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (508 samples, 0.25%)</title><rect x="1113.2" y="197" width="2.9" height="15.0" fill="rgb(219,16,37)" rx="2" ry="2" />
<text  x="1116.16" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt; &gt;::load_object_data (224 samples, 0.11%)</title><rect x="1163.7" y="197" width="1.3" height="15.0" fill="rgb(212,128,9)" rx="2" ry="2" />
<text  x="1166.73" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt; &gt;::load_object_data (4,245 samples, 2.10%)</title><rect x="1054.3" y="261" width="24.7" height="15.0" fill="rgb(238,30,25)" rx="2" ry="2" />
<text  x="1057.26" y="271.5" >b..</text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (69 samples, 0.03%)</title><rect x="491.1" y="133" width="0.4" height="15.0" fill="rgb(239,8,19)" rx="2" ry="2" />
<text  x="494.10" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (73 samples, 0.04%)</title><rect x="990.9" y="197" width="0.5" height="15.0" fill="rgb(236,99,15)" rx="2" ry="2" />
<text  x="993.93" y="207.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (20 samples, 0.01%)</title><rect x="1072.9" y="85" width="0.1" height="15.0" fill="rgb(216,154,10)" rx="2" ry="2" />
<text  x="1075.88" y="95.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt;*&gt;::pointer_to (36 samples, 0.02%)</title><rect x="327.4" y="149" width="0.2" height="15.0" fill="rgb(225,163,23)" rx="2" ry="2" />
<text  x="330.42" y="159.5" ></text>
</g>
<g >
<title>operator new (778 samples, 0.38%)</title><rect x="85.2" y="133" width="4.5" height="15.0" fill="rgb(237,209,29)" rx="2" ry="2" />
<text  x="88.20" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::~vector (66 samples, 0.03%)</title><rect x="1003.4" y="229" width="0.4" height="15.0" fill="rgb(254,218,19)" rx="2" ry="2" />
<text  x="1006.42" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (33 samples, 0.02%)</title><rect x="1174.1" y="245" width="0.2" height="15.0" fill="rgb(210,138,16)" rx="2" ry="2" />
<text  x="1177.08" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (104 samples, 0.05%)</title><rect x="1161.1" y="245" width="0.6" height="15.0" fill="rgb(244,32,20)" rx="2" ry="2" />
<text  x="1164.11" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (5,185 samples, 2.56%)</title><rect x="282.3" y="197" width="30.2" height="15.0" fill="rgb(244,108,11)" rx="2" ry="2" />
<text  x="285.27" y="207.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::pair&lt;int, int&gt;*, std::pair&lt;int, int&gt;*, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; (32 samples, 0.02%)</title><rect x="1157.8" y="229" width="0.2" height="15.0" fill="rgb(215,3,54)" rx="2" ry="2" />
<text  x="1160.83" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (18 samples, 0.01%)</title><rect x="1054.0" y="133" width="0.1" height="15.0" fill="rgb(239,223,2)" rx="2" ry="2" />
<text  x="1056.97" y="143.5" ></text>
</g>
<g >
<title>strcmp@plt (72 samples, 0.04%)</title><rect x="1071.2" y="101" width="0.4" height="15.0" fill="rgb(222,157,11)" rx="2" ry="2" />
<text  x="1074.20" y="111.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, long, int, __gnu_cxx::__ops::_Iter_comp_val&lt;std::less&lt;int&gt; &gt; &gt; (154 samples, 0.08%)</title><rect x="1174.7" y="229" width="0.9" height="15.0" fill="rgb(240,43,7)" rx="2" ry="2" />
<text  x="1177.73" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (18 samples, 0.01%)</title><rect x="1169.7" y="261" width="0.2" height="15.0" fill="rgb(223,16,42)" rx="2" ry="2" />
<text  x="1172.75" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (24 samples, 0.01%)</title><rect x="1167.2" y="133" width="0.2" height="15.0" fill="rgb(237,7,47)" rx="2" ry="2" />
<text  x="1170.24" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, NodeInfo&gt;::load_object_data (42 samples, 0.02%)</title><rect x="1004.1" y="133" width="0.3" height="15.0" fill="rgb(220,57,22)" rx="2" ry="2" />
<text  x="1007.13" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (88 samples, 0.04%)</title><rect x="1053.7" y="229" width="0.5" height="15.0" fill="rgb(205,127,11)" rx="2" ry="2" />
<text  x="1056.66" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, int&gt;, true&gt; &gt;::allocate (23 samples, 0.01%)</title><rect x="1142.2" y="213" width="0.1" height="15.0" fill="rgb(229,229,44)" rx="2" ry="2" />
<text  x="1145.18" y="223.5" ></text>
</g>
<g >
<title>loadOSMDatabaseBIN (224 samples, 0.11%)</title><rect x="1163.7" y="261" width="1.3" height="15.0" fill="rgb(250,42,5)" rx="2" ry="2" />
<text  x="1166.73" y="271.5" ></text>
</g>
<g >
<title>operator new (1,141 samples, 0.56%)</title><rect x="1142.5" y="213" width="6.6" height="15.0" fill="rgb(241,108,18)" rx="2" ry="2" />
<text  x="1145.46" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (146 samples, 0.07%)</title><rect x="1186.3" y="133" width="0.8" height="15.0" fill="rgb(224,188,26)" rx="2" ry="2" />
<text  x="1189.27" y="143.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (52 samples, 0.03%)</title><rect x="133.3" y="149" width="0.3" height="15.0" fill="rgb(215,46,27)" rx="2" ry="2" />
<text  x="136.32" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (35 samples, 0.02%)</title><rect x="679.0" y="133" width="0.2" height="15.0" fill="rgb(219,27,53)" rx="2" ry="2" />
<text  x="681.98" y="143.5" ></text>
</g>
<g >
<title>__dynamic_cast (86 samples, 0.04%)</title><rect x="1015.7" y="197" width="0.5" height="15.0" fill="rgb(254,208,30)" rx="2" ry="2" />
<text  x="1018.73" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, int&gt;, true&gt; &gt;::construct&lt;std::pair&lt;OSMID const, int&gt;, std::pair&lt;OSMID, int&gt; &gt; (25 samples, 0.01%)</title><rect x="1142.3" y="213" width="0.2" height="15.0" fill="rgb(208,35,15)" rx="2" ry="2" />
<text  x="1145.32" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (20,492 samples, 10.13%)</title><rect x="596.0" y="197" width="119.6" height="15.0" fill="rgb(224,130,29)" rx="2" ry="2" />
<text  x="598.98" y="207.5" >std::__detail:..</text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (89 samples, 0.04%)</title><rect x="1097.0" y="229" width="0.5" height="15.0" fill="rgb(219,83,29)" rx="2" ry="2" />
<text  x="1100.02" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (23 samples, 0.01%)</title><rect x="1161.8" y="245" width="0.1" height="15.0" fill="rgb(210,221,20)" rx="2" ry="2" />
<text  x="1164.79" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (92 samples, 0.05%)</title><rect x="1004.0" y="181" width="0.5" height="15.0" fill="rgb(220,168,49)" rx="2" ry="2" />
<text  x="1006.96" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (224 samples, 0.11%)</title><rect x="1163.7" y="213" width="1.3" height="15.0" fill="rgb(237,98,31)" rx="2" ry="2" />
<text  x="1166.73" y="223.5" ></text>
</g>
<g >
<title>_start (57 samples, 0.03%)</title><rect x="1005.7" y="277" width="0.4" height="15.0" fill="rgb(251,87,8)" rx="2" ry="2" />
<text  x="1008.73" y="287.5" ></text>
</g>
<g >
<title>__dynamic_cast (18 samples, 0.01%)</title><rect x="1048.1" y="85" width="0.2" height="15.0" fill="rgb(249,62,42)" rx="2" ry="2" />
<text  x="1051.15" y="95.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, int&gt;&amp;&gt; (81 samples, 0.04%)</title><rect x="647.8" y="117" width="0.5" height="15.0" fill="rgb(217,28,2)" rx="2" ry="2" />
<text  x="650.80" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (6,375 samples, 3.15%)</title><rect x="486.7" y="181" width="37.2" height="15.0" fill="rgb(235,228,8)" rx="2" ry="2" />
<text  x="489.70" y="191.5" >std..</text>
</g>
<g >
<title>malloc_consolidate (132 samples, 0.07%)</title><rect x="1002.3" y="213" width="0.8" height="15.0" fill="rgb(238,80,4)" rx="2" ry="2" />
<text  x="1005.35" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;int const, bool&gt; const&amp;&gt; (238 samples, 0.12%)</title><rect x="472.1" y="133" width="1.3" height="15.0" fill="rgb(240,150,11)" rx="2" ry="2" />
<text  x="475.06" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (154 samples, 0.08%)</title><rect x="1085.8" y="197" width="0.9" height="15.0" fill="rgb(248,179,5)" rx="2" ry="2" />
<text  x="1088.84" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4,902 samples, 2.42%)</title><rect x="534.3" y="165" width="28.6" height="15.0" fill="rgb(211,91,52)" rx="2" ry="2" />
<text  x="537.32" y="175.5" >st..</text>
</g>
<g >
<title>operator new (36 samples, 0.02%)</title><rect x="1158.6" y="229" width="0.2" height="15.0" fill="rgb(251,154,20)" rx="2" ry="2" />
<text  x="1161.61" y="239.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;::operator* (23 samples, 0.01%)</title><rect x="941.5" y="165" width="0.1" height="15.0" fill="rgb(212,204,40)" rx="2" ry="2" />
<text  x="944.47" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (71 samples, 0.04%)</title><rect x="1044.8" y="117" width="0.4" height="15.0" fill="rgb(216,39,0)" rx="2" ry="2" />
<text  x="1047.82" y="127.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;int, int&gt;*&gt;::operator* (21 samples, 0.01%)</title><rect x="836.1" y="101" width="0.1" height="15.0" fill="rgb(217,141,8)" rx="2" ry="2" />
<text  x="839.10" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_check_len (26 samples, 0.01%)</title><rect x="1160.2" y="229" width="0.2" height="15.0" fill="rgb(213,2,38)" rx="2" ry="2" />
<text  x="1163.24" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,127 samples, 1.05%)</title><rect x="1175.9" y="197" width="12.4" height="15.0" fill="rgb(224,82,17)" rx="2" ry="2" />
<text  x="1178.94" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::adj_list_gen&lt;boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;::config::stored_vertex, std::allocator&lt;boost::detail::adj_list_gen&lt;boost::adjacency_list&lt;boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt;::config::stored_vertex&gt; &gt;::_M_default_append (21 samples, 0.01%)</title><rect x="1004.4" y="149" width="0.1" height="15.0" fill="rgb(224,54,7)" rx="2" ry="2" />
<text  x="1007.38" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation::Member, std::allocator&lt;OSMRelation::Member&gt; &gt; &gt;::load_object_data (87 samples, 0.04%)</title><rect x="1053.7" y="213" width="0.5" height="15.0" fill="rgb(206,207,45)" rx="2" ry="2" />
<text  x="1056.67" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator() (20 samples, 0.01%)</title><rect x="570.5" y="133" width="0.1" height="15.0" fill="rgb(244,28,20)" rx="2" ry="2" />
<text  x="573.52" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt; (145 samples, 0.07%)</title><rect x="1157.3" y="245" width="0.8" height="15.0" fill="rgb(229,202,31)" rx="2" ry="2" />
<text  x="1160.29" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::operator= (3,179 samples, 1.57%)</title><rect x="842.6" y="133" width="18.6" height="15.0" fill="rgb(215,30,5)" rx="2" ry="2" />
<text  x="845.62" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (85 samples, 0.04%)</title><rect x="427.8" y="149" width="0.5" height="15.0" fill="rgb(241,49,18)" rx="2" ry="2" />
<text  x="430.77" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40 samples, 0.02%)</title><rect x="1118.0" y="197" width="0.2" height="15.0" fill="rgb(210,173,47)" rx="2" ry="2" />
<text  x="1120.96" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1,767 samples, 0.87%)</title><rect x="658.0" y="165" width="10.3" height="15.0" fill="rgb(224,52,19)" rx="2" ry="2" />
<text  x="660.97" y="175.5" ></text>
</g>
<g >
<title>memcpy@plt (73 samples, 0.04%)</title><rect x="1083.7" y="213" width="0.4" height="15.0" fill="rgb(231,15,47)" rx="2" ry="2" />
<text  x="1086.68" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (101 samples, 0.05%)</title><rect x="1169.0" y="245" width="0.6" height="15.0" fill="rgb(250,70,20)" rx="2" ry="2" />
<text  x="1171.99" y="255.5" ></text>
</g>
<g >
<title>memcpy@plt (59 samples, 0.03%)</title><rect x="1184.9" y="69" width="0.3" height="15.0" fill="rgb(238,137,21)" rx="2" ry="2" />
<text  x="1187.90" y="79.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (35 samples, 0.02%)</title><rect x="1046.2" y="117" width="0.2" height="15.0" fill="rgb(218,223,32)" rx="2" ry="2" />
<text  x="1049.23" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (42 samples, 0.02%)</title><rect x="1051.2" y="149" width="0.3" height="15.0" fill="rgb(220,106,24)" rx="2" ry="2" />
<text  x="1054.23" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, double&gt;&amp;&gt; (92 samples, 0.05%)</title><rect x="558.3" y="117" width="0.5" height="15.0" fill="rgb(222,63,50)" rx="2" ry="2" />
<text  x="561.27" y="127.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (158 samples, 0.08%)</title><rect x="1162.8" y="261" width="0.9" height="15.0" fill="rgb(213,55,5)" rx="2" ry="2" />
<text  x="1165.80" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (1,608 samples, 0.80%)</title><rect x="1178.6" y="149" width="9.3" height="15.0" fill="rgb(210,44,18)" rx="2" ry="2" />
<text  x="1181.55" y="159.5" ></text>
</g>
<g >
<title>findStreetSegmentsOfIntersection (11,701 samples, 5.79%)</title><rect x="67.5" y="197" width="68.3" height="15.0" fill="rgb(251,3,51)" rx="2" ry="2" />
<text  x="70.54" y="207.5" >findStr..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (537 samples, 0.27%)</title><rect x="1073.7" y="133" width="3.1" height="15.0" fill="rgb(208,177,30)" rx="2" ry="2" />
<text  x="1076.67" y="143.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;&gt;::tuple&lt;void, true&gt; (82 samples, 0.04%)</title><rect x="595.5" y="181" width="0.5" height="15.0" fill="rgb(251,102,41)" rx="2" ry="2" />
<text  x="598.50" y="191.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (92 samples, 0.05%)</title><rect x="1004.0" y="229" width="0.5" height="15.0" fill="rgb(207,127,2)" rx="2" ry="2" />
<text  x="1006.96" y="239.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;&gt;::tuple (241 samples, 0.12%)</title><rect x="493.6" y="149" width="1.4" height="15.0" fill="rgb(225,39,32)" rx="2" ry="2" />
<text  x="496.60" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt;::load_object_data (241 samples, 0.12%)</title><rect x="1079.0" y="277" width="1.4" height="15.0" fill="rgb(240,67,25)" rx="2" ry="2" />
<text  x="1082.03" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, double&gt;, false, false&gt;::_Node_iterator (75 samples, 0.04%)</title><rect x="571.1" y="165" width="0.5" height="15.0" fill="rgb(224,92,25)" rx="2" ry="2" />
<text  x="574.13" y="175.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.03%)</title><rect x="1051.2" y="181" width="0.3" height="15.0" fill="rgb(221,151,52)" rx="2" ry="2" />
<text  x="1054.23" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (31 samples, 0.02%)</title><rect x="1048.3" y="117" width="0.2" height="15.0" fill="rgb(245,70,8)" rx="2" ry="2" />
<text  x="1051.33" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (18 samples, 0.01%)</title><rect x="85.1" y="133" width="0.1" height="15.0" fill="rgb(223,126,5)" rx="2" ry="2" />
<text  x="88.09" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMDatabase&gt;::load_object_data (57 samples, 0.03%)</title><rect x="1080.4" y="277" width="0.4" height="15.0" fill="rgb(245,38,1)" rx="2" ry="2" />
<text  x="1083.44" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, int&gt;::pair&lt;int const&amp;, 0ul&gt; (207 samples, 0.10%)</title><rect x="679.5" y="149" width="1.2" height="15.0" fill="rgb(247,190,38)" rx="2" ry="2" />
<text  x="682.47" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (69 samples, 0.03%)</title><rect x="1076.8" y="149" width="0.4" height="15.0" fill="rgb(248,110,14)" rx="2" ry="2" />
<text  x="1079.80" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (494 samples, 0.24%)</title><rect x="1061.8" y="181" width="2.8" height="15.0" fill="rgb(230,71,49)" rx="2" ry="2" />
<text  x="1064.76" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;Feature, std::allocator&lt;Feature&gt; &gt; &gt;::load_object_data (2,184 samples, 1.08%)</title><rect x="1175.9" y="213" width="12.8" height="15.0" fill="rgb(238,94,12)" rx="2" ry="2" />
<text  x="1178.91" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (52 samples, 0.03%)</title><rect x="134.8" y="149" width="0.3" height="15.0" fill="rgb(244,74,33)" rx="2" ry="2" />
<text  x="137.83" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (27 samples, 0.01%)</title><rect x="1003.3" y="213" width="0.1" height="15.0" fill="rgb(245,113,52)" rx="2" ry="2" />
<text  x="1006.26" y="223.5" ></text>
</g>
<g >
<title>operator new (1,366 samples, 0.68%)</title><rect x="12.4" y="261" width="8.0" height="15.0" fill="rgb(249,68,20)" rx="2" ry="2" />
<text  x="15.39" y="271.5" ></text>
</g>
<g >
<title>adjlink::find_node_of_a_node (210 samples, 0.10%)</title><rect x="1160.7" y="261" width="1.3" height="15.0" fill="rgb(208,162,47)" rx="2" ry="2" />
<text  x="1163.75" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (296 samples, 0.15%)</title><rect x="1060.0" y="165" width="1.8" height="15.0" fill="rgb(237,123,45)" rx="2" ry="2" />
<text  x="1063.03" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::pair&lt;int&amp;, int&amp;, true&gt; (478 samples, 0.24%)</title><rect x="718.8" y="181" width="2.8" height="15.0" fill="rgb(231,90,34)" rx="2" ry="2" />
<text  x="721.78" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (140 samples, 0.07%)</title><rect x="1117.4" y="213" width="0.8" height="15.0" fill="rgb(253,141,20)" rx="2" ry="2" />
<text  x="1120.37" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;OSMID const, int&gt; &gt;::_M_valptr (23 samples, 0.01%)</title><rect x="1149.2" y="213" width="0.1" height="15.0" fill="rgb(211,59,1)" rx="2" ry="2" />
<text  x="1152.20" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (390 samples, 0.19%)</title><rect x="1057.8" y="165" width="2.2" height="15.0" fill="rgb(211,63,10)" rx="2" ry="2" />
<text  x="1060.76" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (56 samples, 0.03%)</title><rect x="1025.7" y="181" width="0.3" height="15.0" fill="rgb(224,15,3)" rx="2" ry="2" />
<text  x="1028.67" y="191.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;std::pair&lt;int, int&gt;, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt;::push (10,385 samples, 5.14%)</title><rect x="865.0" y="197" width="60.6" height="15.0" fill="rgb(207,175,41)" rx="2" ry="2" />
<text  x="867.99" y="207.5" >std::p..</text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (52 samples, 0.03%)</title><rect x="133.3" y="165" width="0.3" height="15.0" fill="rgb(253,157,54)" rx="2" ry="2" />
<text  x="136.32" y="175.5" ></text>
</g>
<g >
<title>malloc@plt (778 samples, 0.38%)</title><rect x="85.2" y="117" width="4.5" height="15.0" fill="rgb(239,68,33)" rx="2" ry="2" />
<text  x="88.20" y="127.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (39 samples, 0.02%)</title><rect x="712.5" y="149" width="0.3" height="15.0" fill="rgb(229,171,37)" rx="2" ry="2" />
<text  x="715.53" y="159.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iarchive&lt;boost::archive::binary_iarchive&gt;::load_override (294 samples, 0.15%)</title><rect x="1041.2" y="149" width="1.7" height="15.0" fill="rgb(250,163,36)" rx="2" ry="2" />
<text  x="1044.20" y="159.5" ></text>
</g>
<g >
<title>__dynamic_cast (27 samples, 0.01%)</title><rect x="1073.3" y="101" width="0.1" height="15.0" fill="rgb(206,25,34)" rx="2" ry="2" />
<text  x="1076.26" y="111.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (42 samples, 0.02%)</title><rect x="1185.2" y="53" width="0.3" height="15.0" fill="rgb(218,101,49)" rx="2" ry="2" />
<text  x="1188.25" y="63.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (352 samples, 0.17%)</title><rect x="1071.6" y="133" width="2.1" height="15.0" fill="rgb(249,170,44)" rx="2" ry="2" />
<text  x="1074.62" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::begin (172 samples, 0.09%)</title><rect x="863.2" y="181" width="1.0" height="15.0" fill="rgb(223,39,23)" rx="2" ry="2" />
<text  x="866.24" y="191.5" ></text>
</g>
<g >
<title>std::move&lt;std::pair&lt;int, int&gt;&amp;&gt; (60 samples, 0.03%)</title><rect x="941.1" y="165" width="0.4" height="15.0" fill="rgb(237,26,51)" rx="2" ry="2" />
<text  x="944.12" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,191 samples, 1.08%)</title><rect x="1175.9" y="229" width="12.8" height="15.0" fill="rgb(234,178,35)" rx="2" ry="2" />
<text  x="1178.91" y="239.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (157 samples, 0.08%)</title><rect x="1155.8" y="197" width="0.9" height="15.0" fill="rgb(209,174,54)" rx="2" ry="2" />
<text  x="1158.79" y="207.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (29 samples, 0.01%)</title><rect x="712.8" y="165" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="715.76" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (309 samples, 0.15%)</title><rect x="1046.7" y="133" width="1.8" height="15.0" fill="rgb(219,142,4)" rx="2" ry="2" />
<text  x="1049.73" y="143.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (194 samples, 0.10%)</title><rect x="21.1" y="213" width="1.1" height="15.0" fill="rgb(243,54,15)" rx="2" ry="2" />
<text  x="24.08" y="223.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.01%)</title><rect x="1048.7" y="149" width="0.2" height="15.0" fill="rgb(243,174,13)" rx="2" ry="2" />
<text  x="1051.73" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (229 samples, 0.11%)</title><rect x="567.9" y="149" width="1.3" height="15.0" fill="rgb(213,33,25)" rx="2" ry="2" />
<text  x="570.86" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (555 samples, 0.27%)</title><rect x="1183.0" y="117" width="3.3" height="15.0" fill="rgb(206,131,54)" rx="2" ry="2" />
<text  x="1186.03" y="127.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, bool&gt;::pair&lt;int const&amp;&gt; (225 samples, 0.11%)</title><rect x="492.3" y="149" width="1.3" height="15.0" fill="rgb(210,10,38)" rx="2" ry="2" />
<text  x="495.29" y="159.5" ></text>
</g>
<g >
<title>malloc (19 samples, 0.01%)</title><rect x="21.2" y="101" width="0.1" height="15.0" fill="rgb(231,211,23)" rx="2" ry="2" />
<text  x="24.22" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_begin (29 samples, 0.01%)</title><rect x="1138.0" y="181" width="0.2" height="15.0" fill="rgb(207,41,4)" rx="2" ry="2" />
<text  x="1140.99" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (51 samples, 0.03%)</title><rect x="1046.4" y="117" width="0.3" height="15.0" fill="rgb(219,145,17)" rx="2" ry="2" />
<text  x="1049.43" y="127.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (63 samples, 0.03%)</title><rect x="1003.4" y="197" width="0.4" height="15.0" fill="rgb(217,229,54)" rx="2" ry="2" />
<text  x="1006.44" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (207 samples, 0.10%)</title><rect x="1004.5" y="277" width="1.2" height="15.0" fill="rgb(225,79,24)" rx="2" ry="2" />
<text  x="1007.52" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (56 samples, 0.03%)</title><rect x="1063.8" y="133" width="0.4" height="15.0" fill="rgb(205,54,43)" rx="2" ry="2" />
<text  x="1066.85" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (746 samples, 0.37%)</title><rect x="596.0" y="181" width="4.3" height="15.0" fill="rgb(205,215,30)" rx="2" ry="2" />
<text  x="598.98" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, int&gt;, false, true&gt; &gt; (18 samples, 0.01%)</title><rect x="1152.6" y="197" width="0.2" height="15.0" fill="rgb(245,102,22)" rx="2" ry="2" />
<text  x="1155.65" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (6,420 samples, 3.17%)</title><rect x="675.5" y="181" width="37.4" height="15.0" fill="rgb(246,180,19)" rx="2" ry="2" />
<text  x="678.46" y="191.5" >std..</text>
</g>
<g >
<title>std::priority_queue&lt;std::pair&lt;int, int&gt;, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt;::empty (62 samples, 0.03%)</title><rect x="722.0" y="197" width="0.3" height="15.0" fill="rgb(221,49,46)" rx="2" ry="2" />
<text  x="724.96" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (210 samples, 0.10%)</title><rect x="1041.6" y="117" width="1.3" height="15.0" fill="rgb(232,224,20)" rx="2" ry="2" />
<text  x="1044.63" y="127.5" ></text>
</g>
<g >
<title>strcmp@plt (239 samples, 0.12%)</title><rect x="1009.0" y="197" width="1.4" height="15.0" fill="rgb(216,48,50)" rx="2" ry="2" />
<text  x="1012.01" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (400 samples, 0.20%)</title><rect x="643.3" y="133" width="2.4" height="15.0" fill="rgb(239,62,25)" rx="2" ry="2" />
<text  x="646.34" y="143.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.02%)</title><rect x="1166.0" y="101" width="0.2" height="15.0" fill="rgb(214,177,29)" rx="2" ry="2" />
<text  x="1169.04" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, bool&gt;::pair&lt;int const&amp;, 0ul&gt; (205 samples, 0.10%)</title><rect x="491.1" y="149" width="1.2" height="15.0" fill="rgb(252,74,1)" rx="2" ry="2" />
<text  x="494.10" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (21 samples, 0.01%)</title><rect x="1042.3" y="85" width="0.1" height="15.0" fill="rgb(207,18,47)" rx="2" ry="2" />
<text  x="1045.32" y="95.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;&gt;::tuple&lt;void, true&gt; (130 samples, 0.06%)</title><rect x="714.8" y="181" width="0.8" height="15.0" fill="rgb(247,167,34)" rx="2" ry="2" />
<text  x="717.80" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (91 samples, 0.05%)</title><rect x="1073.1" y="117" width="0.6" height="15.0" fill="rgb(224,61,27)" rx="2" ry="2" />
<text  x="1076.14" y="127.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (20 samples, 0.01%)</title><rect x="1067.1" y="213" width="0.2" height="15.0" fill="rgb(249,212,38)" rx="2" ry="2" />
<text  x="1070.13" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (3,082 samples, 1.52%)</title><rect x="458.9" y="181" width="18.0" height="15.0" fill="rgb(219,215,19)" rx="2" ry="2" />
<text  x="461.95" y="191.5" ></text>
</g>
<g >
<title>malloc@plt (226 samples, 0.11%)</title><rect x="1147.8" y="197" width="1.3" height="15.0" fill="rgb(233,169,36)" rx="2" ry="2" />
<text  x="1150.80" y="207.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (6,302 samples, 3.12%)</title><rect x="92.4" y="165" width="36.8" height="15.0" fill="rgb(221,28,3)" rx="2" ry="2" />
<text  x="95.41" y="175.5" >std..</text>
</g>
<g >
<title>strcmp@plt (38 samples, 0.02%)</title><rect x="1047.6" y="69" width="0.2" height="15.0" fill="rgb(238,175,17)" rx="2" ry="2" />
<text  x="1050.61" y="79.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt; (23,935 samples, 11.84%)</title><rect x="723.6" y="181" width="139.6" height="15.0" fill="rgb(240,154,52)" rx="2" ry="2" />
<text  x="726.56" y="191.5" >std::pop_heap&lt;__g..</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (56 samples, 0.03%)</title><rect x="1038.3" y="101" width="0.3" height="15.0" fill="rgb(222,163,38)" rx="2" ry="2" />
<text  x="1041.31" y="111.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (31 samples, 0.02%)</title><rect x="1069.8" y="133" width="0.2" height="15.0" fill="rgb(225,8,5)" rx="2" ry="2" />
<text  x="1072.79" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (36 samples, 0.02%)</title><rect x="1055.0" y="197" width="0.2" height="15.0" fill="rgb(248,58,38)" rx="2" ry="2" />
<text  x="1058.04" y="207.5" ></text>
</g>
<g >
<title>operator delete@plt (33 samples, 0.02%)</title><rect x="1077.9" y="181" width="0.2" height="15.0" fill="rgb(242,9,46)" rx="2" ry="2" />
<text  x="1080.89" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (912 samples, 0.45%)</title><rect x="1142.5" y="181" width="5.3" height="15.0" fill="rgb(212,11,5)" rx="2" ry="2" />
<text  x="1145.48" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, bool&gt; &gt;::_M_v (999 samples, 0.49%)</title><rect x="428.3" y="133" width="5.8" height="15.0" fill="rgb(233,114,47)" rx="2" ry="2" />
<text  x="431.26" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, int&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3,185 samples, 1.58%)</title><rect x="1097.5" y="229" width="18.6" height="15.0" fill="rgb(227,141,3)" rx="2" ry="2" />
<text  x="1100.54" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (1,593 samples, 0.79%)</title><rect x="793.2" y="117" width="9.3" height="15.0" fill="rgb(238,3,8)" rx="2" ry="2" />
<text  x="796.16" y="127.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (279 samples, 0.14%)</title><rect x="1042.9" y="149" width="1.6" height="15.0" fill="rgb(234,29,31)" rx="2" ry="2" />
<text  x="1045.92" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, int&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;OSMID const, int&gt;, std::pair&lt;OSMID, int&gt; &gt; (147 samples, 0.07%)</title><rect x="1149.9" y="213" width="0.9" height="15.0" fill="rgb(253,171,35)" rx="2" ry="2" />
<text  x="1152.90" y="223.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, bool&gt;, false&gt; &gt; (37 samples, 0.02%)</title><rect x="517.1" y="165" width="0.2" height="15.0" fill="rgb(208,155,21)" rx="2" ry="2" />
<text  x="520.09" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (69 samples, 0.03%)</title><rect x="1004.0" y="149" width="0.4" height="15.0" fill="rgb(210,167,19)" rx="2" ry="2" />
<text  x="1006.98" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (695 samples, 0.34%)</title><rect x="857.1" y="117" width="4.1" height="15.0" fill="rgb(210,57,27)" rx="2" ry="2" />
<text  x="860.11" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (39 samples, 0.02%)</title><rect x="1053.9" y="165" width="0.2" height="15.0" fill="rgb(216,150,46)" rx="2" ry="2" />
<text  x="1056.89" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::base (49 samples, 0.02%)</title><rect x="927.9" y="165" width="0.3" height="15.0" fill="rgb(215,180,52)" rx="2" ry="2" />
<text  x="930.95" y="175.5" ></text>
</g>
<g >
<title>[unknown] (718 samples, 0.36%)</title><rect x="1006.2" y="229" width="4.2" height="15.0" fill="rgb(235,141,14)" rx="2" ry="2" />
<text  x="1009.21" y="239.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (54 samples, 0.03%)</title><rect x="1005.8" y="245" width="0.3" height="15.0" fill="rgb(229,36,33)" rx="2" ry="2" />
<text  x="1008.75" y="255.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (268 samples, 0.13%)</title><rect x="1037.5" y="149" width="1.6" height="15.0" fill="rgb(245,7,9)" rx="2" ry="2" />
<text  x="1040.54" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (672 samples, 0.33%)</title><rect x="1015.2" y="213" width="3.9" height="15.0" fill="rgb(215,139,9)" rx="2" ry="2" />
<text  x="1018.23" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator- (148 samples, 0.07%)</title><rect x="926.0" y="181" width="0.9" height="15.0" fill="rgb(242,8,42)" rx="2" ry="2" />
<text  x="929.04" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (1,397 samples, 0.69%)</title><rect x="1069.4" y="165" width="8.2" height="15.0" fill="rgb(212,123,28)" rx="2" ry="2" />
<text  x="1072.40" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_deallocate_node (18 samples, 0.01%)</title><rect x="1003.3" y="181" width="0.1" height="15.0" fill="rgb(236,92,53)" rx="2" ry="2" />
<text  x="1006.32" y="191.5" ></text>
</g>
<g >
<title>getIntersectionPosition (23 samples, 0.01%)</title><rect x="66.5" y="165" width="0.2" height="15.0" fill="rgb(214,218,40)" rx="2" ry="2" />
<text  x="69.53" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;LatLon, LatLon&gt;::pair&lt;LatLon&amp;, LatLon&amp;, true&gt; (374 samples, 0.18%)</title><rect x="280.1" y="165" width="2.2" height="15.0" fill="rgb(218,52,36)" rx="2" ry="2" />
<text  x="283.09" y="175.5" ></text>
</g>
<g >
<title>[unknown] (194 samples, 0.10%)</title><rect x="1001.2" y="277" width="1.1" height="15.0" fill="rgb(226,130,46)" rx="2" ry="2" />
<text  x="1004.19" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, bool&gt;, std::allocator&lt;std::pair&lt;int const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (120 samples, 0.06%)</title><rect x="473.8" y="149" width="0.7" height="15.0" fill="rgb(247,99,9)" rx="2" ry="2" />
<text  x="476.75" y="159.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::operator= (579 samples, 0.29%)</title><rect x="941.6" y="165" width="3.4" height="15.0" fill="rgb(219,33,44)" rx="2" ry="2" />
<text  x="944.61" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (233 samples, 0.12%)</title><rect x="1165.5" y="181" width="1.3" height="15.0" fill="rgb(236,71,49)" rx="2" ry="2" />
<text  x="1168.45" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (28 samples, 0.01%)</title><rect x="1188.3" y="197" width="0.2" height="15.0" fill="rgb(251,110,31)" rx="2" ry="2" />
<text  x="1191.35" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (432 samples, 0.21%)</title><rect x="1033.5" y="149" width="2.5" height="15.0" fill="rgb(235,21,6)" rx="2" ry="2" />
<text  x="1036.53" y="159.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt; &gt; (18 samples, 0.01%)</title><rect x="1157.6" y="213" width="0.1" height="15.0" fill="rgb(210,13,36)" rx="2" ry="2" />
<text  x="1160.64" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (688 samples, 0.34%)</title><rect x="476.9" y="181" width="4.0" height="15.0" fill="rgb(217,15,7)" rx="2" ry="2" />
<text  x="479.93" y="191.5" ></text>
</g>
<g >
<title>exit (278 samples, 0.14%)</title><rect x="1002.3" y="261" width="1.7" height="15.0" fill="rgb(229,157,21)" rx="2" ry="2" />
<text  x="1005.34" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (31 samples, 0.02%)</title><rect x="1093.0" y="245" width="0.2" height="15.0" fill="rgb(217,225,11)" rx="2" ry="2" />
<text  x="1096.03" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (28 samples, 0.01%)</title><rect x="1090.0" y="181" width="0.2" height="15.0" fill="rgb(247,25,4)" rx="2" ry="2" />
<text  x="1093.03" y="191.5" ></text>
</g>
<g >
<title>std::make_pair&lt;OSMID&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (43 samples, 0.02%)</title><rect x="1091.9" y="245" width="0.2" height="15.0" fill="rgb(214,138,1)" rx="2" ry="2" />
<text  x="1094.89" y="255.5" ></text>
</g>
<g >
<title>getIntersectionPosition (4,844 samples, 2.40%)</title><rect x="248.5" y="181" width="28.3" height="15.0" fill="rgb(219,31,9)" rx="2" ry="2" />
<text  x="251.49" y="191.5" >g..</text>
</g>
<g >
<title>std::priority_queue&lt;std::pair&lt;int, int&gt;, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt;::pop (24,448 samples, 12.09%)</title><rect x="722.3" y="197" width="142.7" height="15.0" fill="rgb(242,218,9)" rx="2" ry="2" />
<text  x="725.33" y="207.5" >std::priority_queu..</text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; (20 samples, 0.01%)</title><rect x="590.9" y="165" width="0.1" height="15.0" fill="rgb(226,145,3)" rx="2" ry="2" />
<text  x="593.88" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2,587 samples, 1.28%)</title><rect x="312.5" y="197" width="15.1" height="15.0" fill="rgb(237,69,29)" rx="2" ry="2" />
<text  x="315.53" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (90 samples, 0.04%)</title><rect x="1004.0" y="165" width="0.5" height="15.0" fill="rgb(248,50,11)" rx="2" ry="2" />
<text  x="1006.98" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (82 samples, 0.04%)</title><rect x="1092.2" y="229" width="0.5" height="15.0" fill="rgb(229,150,32)" rx="2" ry="2" />
<text  x="1095.22" y="239.5" ></text>
</g>
<g >
<title>memcpy@plt (25 samples, 0.01%)</title><rect x="1042.2" y="85" width="0.1" height="15.0" fill="rgb(253,212,15)" rx="2" ry="2" />
<text  x="1045.17" y="95.5" ></text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt; (3,293 samples, 1.63%)</title><rect x="926.0" y="197" width="19.3" height="15.0" fill="rgb(225,227,7)" rx="2" ry="2" />
<text  x="929.04" y="207.5" ></text>
</g>
<g >
<title>streetsuper::get_int (591 samples, 0.29%)</title><rect x="1170.3" y="261" width="3.4" height="15.0" fill="rgb(224,170,3)" rx="2" ry="2" />
<text  x="1173.30" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int const&amp;&gt; (46 samples, 0.02%)</title><rect x="1159.8" y="229" width="0.3" height="15.0" fill="rgb(235,150,34)" rx="2" ry="2" />
<text  x="1162.78" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt;*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (62 samples, 0.03%)</title><rect x="926.5" y="165" width="0.4" height="15.0" fill="rgb(250,32,35)" rx="2" ry="2" />
<text  x="929.55" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;OSMID, int, std::hash&lt;OSMID&gt;, std::equal_to&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, int&gt; &gt; &gt;::insert&lt;std::pair&lt;OSMID, int&gt; &gt; (291 samples, 0.14%)</title><rect x="1154.1" y="245" width="1.7" height="15.0" fill="rgb(215,31,41)" rx="2" ry="2" />
<text  x="1157.07" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (1,872 samples, 0.93%)</title><rect x="1067.8" y="197" width="10.9" height="15.0" fill="rgb(215,189,49)" rx="2" ry="2" />
<text  x="1070.76" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;OSMID const, int&gt;::pair&lt;OSMID, int, true&gt; (19 samples, 0.01%)</title><rect x="1150.8" y="213" width="0.1" height="15.0" fill="rgb(216,69,20)" rx="2" ry="2" />
<text  x="1153.77" y="223.5" ></text>
</g>
<g >
<title>TrieNode::tt_insert (179 samples, 0.09%)</title><rect x="1155.8" y="213" width="1.0" height="15.0" fill="rgb(229,20,2)" rx="2" ry="2" />
<text  x="1158.79" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_node (1,364 samples, 0.67%)</title><rect x="319.7" y="165" width="7.9" height="15.0" fill="rgb(250,97,13)" rx="2" ry="2" />
<text  x="322.67" y="175.5" ></text>
</g>
<g >
<title>malloc (27 samples, 0.01%)</title><rect x="1169.0" y="213" width="0.2" height="15.0" fill="rgb(247,48,41)" rx="2" ry="2" />
<text  x="1172.00" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (210 samples, 0.10%)</title><rect x="1045.5" y="133" width="1.2" height="15.0" fill="rgb(224,104,31)" rx="2" ry="2" />
<text  x="1048.50" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;OSMID const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;OSMID, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1,269 samples, 0.63%)</title><rect x="1084.5" y="245" width="7.4" height="15.0" fill="rgb(248,5,15)" rx="2" ry="2" />
<text  x="1087.45" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (357 samples, 0.18%)</title><rect x="18.3" y="245" width="2.1" height="15.0" fill="rgb(219,88,41)" rx="2" ry="2" />
<text  x="21.27" y="255.5" ></text>
</g>
<g >
<title>read@plt (55 samples, 0.03%)</title><rect x="1043.7" y="69" width="0.4" height="15.0" fill="rgb(215,134,15)" rx="2" ry="2" />
<text  x="1046.74" y="79.5" ></text>
</g>
<g >
<title>streetsuper::ss_insert (362 samples, 0.18%)</title><rect x="1173.7" y="261" width="2.2" height="15.0" fill="rgb(244,214,44)" rx="2" ry="2" />
<text  x="1176.75" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (20 samples, 0.01%)</title><rect x="1157.3" y="197" width="0.1" height="15.0" fill="rgb(207,178,18)" rx="2" ry="2" />
<text  x="1160.31" y="207.5" ></text>
</g>
</g>
</svg>
